# Complexity thresholds
cognitive-complexity-threshold = 10
excessive-nesting-threshold = 4
too-many-arguments-threshold = 4
too-many-lines-threshold = 80
min-ident-chars-threshold = 2
allowed-idents-below-min-chars = ["..", "id", "x", "y", "z", "i", "j", "k", "n", "m"] # Added common loop/coord vars

# Keep your type complexity threshold - it's reasonable
type-complexity-threshold = 400

# Keep your 64-bit optimization
trivial-copy-size-limit = 16

# Testing allowances
allow-expect-in-tests = true
allow-print-in-tests = true
allow-dbg-in-tests = true
allow-unwrap-in-tests = true
suppress-restriction-lint-in-const = true

# Trait implementations
allow-renamed-params-for = ["core::fmt::Debug", "core::fmt::Display", "futures_sink::Sink", "serde::de::Visitor", ".."]

# Documentation
doc-valid-idents = [
    "..",
    "CodeQL",
    "CPython",
    "FastAPI",
    "IPython",
    "LangChain",
    "LibCST",
    "McCabe",
    "NumPy",
    "SCREAMING_SNAKE_CASE",
    "SQLAlchemy",
    "StackOverflow",
    "PyCharm",
    "SNMPv1",
    "SNMPv2",
    "SNMPv3",
    "PyFlakes",
    # Add common Rust ecosystem names
    "GraphQL",
    "gRPC",
    "WebSocket",
    "PostgreSQL",
    "MySQL",
    "SQLite",
    "MongoDB",
    "Redis",
    "Kubernetes",
    "GitHub",
    "GitLab",
]

# Keep your disallowed names
disallowed-names = ["foo", "bar", "baz", "tmp", "qux", "temp", "test", "dummy"]

# Types - keeping your deterministic requirements
disallowed-types = [
    { path = "std::collections::HashMap", reason = "Non-deterministic iter - use indexmap::IndexMap instead" },
    { path = "std::collections::HashSet", reason = "Non-deterministic iter - use indexmap::IndexSet instead" },
    # Add more problematic types
    { path = "std::sync::Once", reason = "Use std::sync::OnceLock for lazy initialization (available since 1.70)" },
]

# Methods - merging your excellent list with modern practices
disallowed-methods = [
    # Keep all your determinism rules
    { path = "rand::random", reason = "Use a deterministic hash (e.g. via a cryptographic hasher like Sha256) instead of `rand::random`." },
    { path = "rand::Rng::gen", reason = "Use a deterministic hash (e.g. via Sha256) rather than generating random bytes at runtime." },
    { path = "rand::rngs::ThreadRng", reason = "ThreadRng is inherently non‐deterministic; use a fixed‐seed or hash‐based approach instead." },
    { path = "rand::rngs::ThreadRng::gen", reason = "Use a deterministic hash (e.g. via Sha256) instead of `ThreadRng::gen`." },
    { path = "rand::rngs::ThreadRng::gen_range", reason = "Use a deterministic hash (e.g. via Sha256) instead of `ThreadRng::gen_range`." },

    # Keep your cow_utils optimizations
    { path = "str::to_ascii_lowercase", reason = "To avoid memory allocation, use `cow_utils::CowUtils::cow_to_ascii_lowercase` instead." },
    { path = "str::to_ascii_uppercase", reason = "To avoid memory allocation, use `cow_utils::CowUtils::cow_to_ascii_uppercase` instead." },
    { path = "str::to_lowercase", reason = "To avoid memory allocation, use `cow_utils::CowUtils::cow_to_lowercase` instead." },
    { path = "str::to_uppercase", reason = "To avoid memory allocation, use `cow_utils::CowUtils::cow_to_uppercase` instead." },
    { path = "str::replace", reason = "To avoid memory allocation, use `cow_utils::CowUtils::replace` instead." },
    { path = "str::replacen", reason = "To avoid memory allocation, use `cow_utils::CowUtils::replacen` instead." },

    # Keep your safety rules
    { path = "std::mem::forget", reason = "future::scope is unsafe when used with forget" },
    { path = "futures::executor::block_on", reason = "block_on can cause deadlock easily" },
    { path = "async_std::task::block_on", reason = "block_on can cause deadlock easily" },
    { path = "pollster::block_on", reason = "block_on can cause deadlock easily" },

    # Keep your time determinism rules
    { path = "std::time::Instant::now", reason = "Do not use current date/time in code that must be deterministic" },
    { path = "chrono::DateTime::now", reason = "Do not use current date/time in code that must be deterministic" },
    { path = "chrono::Utc::now", reason = "Do not use current date/time in code that must be deterministic" },
    { path = "namada_core::time::DateTimeUtc::now", reason = "Do not use current date/time in code that must be deterministic" },
    { path = "wasmtimer::std::Instant", reason = "Do not use current date/time in code that must be deterministic" },

    # Keep your for_each rule
    { path = "std::iter::Iterator::for_each", reason = "prefer `for` for side-effects" },

    # Add modern Rust best practices that AI often misses
    { path = "std::option::Option::unwrap", reason = "use `expect` with descriptive message or handle None case" },
    { path = "std::result::Result::unwrap", reason = "use `expect` with descriptive message or handle error case" },
    { path = "std::vec::Vec::clone", reason = "avoid cloning vectors - use references, slices, or Arc<[T]>" },
    { path = "std::panic::catch_unwind", reason = "panics are not for control flow - use Result" },
    { path = "std::process::exit", reason = "return Result from main() instead of exiting" },
    { path = "std::thread::sleep", reason = "use async sleep in async contexts, or document why blocking is needed" },
    { path = "std::mem::transmute", reason = "use safe alternatives like bytemuck or zerocopy" },
    { path = "std::mem::uninitialized", reason = "deprecated - use MaybeUninit" },
    { path = "std::mem::zeroed", reason = "use MaybeUninit::zeroed or Default::default" },

    # Prevent inefficient string operations that AI often generates
    { path = "std::string::String::from", reason = "use String::from() only for &str, use to_string() for Display types" },
    { path = "std::format", reason = "use write! for repeated formatting, format! allocates each time" },

    # Async footguns
    { path = "tokio::task::spawn_blocking", reason = "document why blocking is necessary - consider async alternatives" },
    { path = "std::sync::Mutex", reason = "use tokio::sync::Mutex in async code" },
    { path = "std::sync::RwLock", reason = "use tokio::sync::RwLock in async code" },
]

# Keep your interior mutability allowlist
ignore-interior-mutability = [
    "ruff_formatter::format_element::Interned",
    "ruff_python_ast::hashable::HashableExpr",
]
