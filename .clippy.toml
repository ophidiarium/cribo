cognitive-complexity-threshold = 10
excessive-nesting-threshold = 4
too-many-arguments-threshold = 4
too-many-lines-threshold = 80
min-ident-chars-threshold = 2
allowed-idents-below-min-chars = ["..", "id"]

# The default clippy value for this is 250, which causes warnings for rather simple types
# like Box<dyn Fn(&mut Env, &T)>, which seems overly strict. The new value of 400 is
# a simple guess. It might be worth lowering this, or using the default, in the future.
type-complexity-threshold = 400

# The default Clippy value is capped at 8 bytes, which was chosen to improve performance on 32-bit.
# Given that we are building for the future and even low-end mobile phones have 64-bit CPUs,
# it makes sense to optimize for 64-bit and accept the performance hits on 32-bit.
# 16 bytes is the number of bytes that fits into two 64-bit CPU registers.
trivial-copy-size-limit = 16

allow-expect-in-tests = true
allow-print-in-tests = true
suppress-restriction-lint-in-const = true
allow-renamed-params-for = ["core::fmt::Debug", "core::fmt::Display", "futures_sink::Sink", "serde::de::Visitor", ".."]

# copied from Ruff config
doc-valid-idents = [
    "..",
    "CodeQL",
    "CPython",
    "FastAPI",
    "IPython",
    "LangChain",
    "LibCST",
    "McCabe",
    "NumPy",
    "SCREAMING_SNAKE_CASE",
    "SQLAlchemy",
    "StackOverflow",
    "PyCharm",
    "SNMPv1",
    "SNMPv2",
    "SNMPv3",
    "PyFlakes",
]

# ban foo/bar/baz/tmp as identifiers
disallowed-names = ["foo", "bar", "baz", "tmp", "qux"]

allow-dbg-in-tests = true
allow-unwrap-in-tests = true

disallowed-methods = [
    { path = "str::to_ascii_lowercase", reason = "To avoid memory allocation, use `cow_utils::CowUtils::cow_to_ascii_lowercase` instead." },
    { path = "str::to_ascii_uppercase", reason = "To avoid memory allocation, use `cow_utils::CowUtils::cow_to_ascii_uppercase` instead." },
    { path = "str::to_lowercase", reason = "To avoid memory allocation, use `cow_utils::CowUtils::cow_to_lowercase` instead." },
    { path = "str::to_uppercase", reason = "To avoid memory allocation, use `cow_utils::CowUtils::cow_to_uppercase` instead." },
    { path = "str::replace", reason = "To avoid memory allocation, use `cow_utils::CowUtils::replace` instead." },
    { path = "str::replacen", reason = "To avoid memory allocation, use `cow_utils::CowUtils::replacen` instead." },
    { path = "std::mem::forget", reason = "future::scope is unsafe when used with forget" },
    { path = "futures::executor::block_on", reason = "block_on can cause deadlock easily" },
    { path = "async_std::task::block_on", reason = "block_on can cause deadlock easily" },
    { path = "pollster::block_on", reason = "block_on can cause deadlock easily" },
]
