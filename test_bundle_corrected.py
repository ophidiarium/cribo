#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

# Preserved imports
import os

# ─ Module: mypackage.data_processor ─
"""Data processing module."""


def process_data(data):
    """Process the input data."""
    processed = data.copy()
    processed["processed"] = True
    return processed


# ─ Module: mypackage.formatter ─
"""Data formatting module."""


def format_data(data):
    """Format the processed data."""
    return f"Formatted: {data}"


# ─ Module: mypackage.config ─
import types

mypackage = types.ModuleType("mypackage")
mypackage.config = types.ModuleType("mypackage.config")
exec('"""Configuration module."""\nimport os\nclass Config:\n    """Configuration class."""\n\n    def __init__(self):\n        self.DEBUG = os.environ.get("DEBUG", "false").lower() == "true"\n        self.LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO")\nconfig = Config()', globals(), mypackage.config.__dict__)

# ─ Module: mypackage.utils.helper ─
"""Helper utilities."""


def helper_function(data):
    """Helper function for processing data."""
    return f"Helped: {data}"


# ─ Module: mypackage.utils.constants ─
"""Constants module."""
MAX_ITEMS = 100
DEFAULT_VALUE = "default"

# ─ Module: mypackage ─
process_data = process_data
format_data = format_data
config = mypackage.config.config
helper_function = helper_function
"""\nPackage initialization with re-exports.\n\nThis __init__.py demonstrates the pattern where imports are made but not directly used\nwithin this file - they are re-exports for the package interface.\nThese imports should NOT be stripped as unused, even though they don't appear\nto be used within this file itself.\n"""
__version__ = "1.0.0"
__all__ = ["process_data", "format_data", "config", "helper_function", "__version__"]
__mypackage_DEBUG_MODE = config.DEBUG

# ─ Module: mypackage.utils ─
helper_function = helper_function
MAX_ITEMS = MAX_ITEMS
DEFAULT_VALUE = DEFAULT_VALUE
"""Utils subpackage with re-exports."""
__all__ = ["helper_function", "MAX_ITEMS", "DEFAULT_VALUE"]

# ─ Entry Module: main ─
__main_DEBUG_MODE = config.DEBUG
print(f"Debug mode: {DEBUG_MODE}")
print(f"Log level: {config.LOG_LEVEL}")
print("Test completed successfully")
