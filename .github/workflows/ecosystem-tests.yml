name: Ecosystem Tests

on:
  pull_request:
    paths:
      - 'crates/**'
      - 'ecosystem/**'
      - '.github/workflows/ecosystem-tests.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  pull-requests: write
  issues: write

jobs:
  ecosystem-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true
          python-version: 3.12

      - name: Install Python dependencies
        run: |
          uv sync --all-groups

      - name: Build cribo (release mode)
        run: cargo build --release --bin cribo

      - name: Run ecosystem tests
        continue-on-error: true
        run: |
          # Run all ecosystem tests with pytest
          # --tb=short for shorter tracebacks
          # -v for verbose output
          # --junit-xml for test reporting
          # Tests marked with xfail are expected to fail

          echo "::group::Running ecosystem tests with pytest"

          # Run pytest
          pytest ecosystem/scenarios/test_*.py \
            -v \
            --tb=short \
            --junit-xml=test-results.xml \
            --color=yes

          echo "::endgroup::"

          # Parse results for reporting
          if [ -f test-results.xml ]; then
            # Extract test counts from JUnit XML
            total_tests=$(grep -o 'tests="[0-9]*"' test-results.xml | head -1 | grep -o '[0-9]*' || echo "0")
            failures=$(grep -o 'failures="[0-9]*"' test-results.xml | head -1 | grep -o '[0-9]*' || echo "0")
            errors=$(grep -o 'errors="[0-9]*"' test-results.xml | head -1 | grep -o '[0-9]*' || echo "0")
            skipped=$(grep -o 'skipped="[0-9]*"' test-results.xml | head -1 | grep -o '[0-9]*' || echo "0")

            echo "-----------------------------------"
            echo "Test Results Summary:"
            echo "  Total tests: $total_tests"
            echo "  Passed: $((total_tests - failures - errors - skipped))"
            echo "  Failed: $failures"
            echo "  Errors: $errors"
            echo "  Skipped: $skipped"
            echo "-----------------------------------"

            # Save results for the report
            {
              echo "ECOSYSTEM_TEST_COUNT=$total_tests"
              echo "ECOSYSTEM_PASSED=$((total_tests - failures - errors - skipped))"
              echo "ECOSYSTEM_FAILED=$failures"
              echo "ECOSYSTEM_ERRORS=$errors"
              echo "ECOSYSTEM_SKIPPED=$skipped"
            } >> $GITHUB_ENV
          else
            # No test results file, save defaults
            {
              echo "ECOSYSTEM_TEST_COUNT=0"
              echo "ECOSYSTEM_PASSED=0"
              echo "ECOSYSTEM_FAILED=0"
              echo "ECOSYSTEM_ERRORS=0"
              echo "ECOSYSTEM_SKIPPED=0"
            } >> $GITHUB_ENV
          fi

      - name: Run ecosystem benchmarks
        id: bench
        run: |
          # Run benchmarks and save results
          cargo bench --bench ecosystem --features bench -- --save-baseline pr-${{ github.event.pull_request.number || 'main' }}

          # If this is a PR, compare against main
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Try to load main baseline for comparison
            if cargo bench --bench ecosystem --features bench -- --load-baseline main &>/dev/null; then
              cargo bench --bench ecosystem --features bench -- --baseline main > benchmark_results.txt 2>&1 || true
            else
              echo "No main baseline found for comparison" > benchmark_results.txt
            fi
          fi

      - name: Generate benchmark report
        if: github.event_name == 'pull_request'
        id: benchmark-report
        run: |
          # Create a markdown report using grouped commands to avoid shellcheck SC2129
          {
            echo "## 📊 Ecosystem Test Results"
            echo ""
            echo "### 📋 Test Status"
            echo ""

            if [ -n "$ECOSYSTEM_TEST_COUNT" ] && [ "$ECOSYSTEM_TEST_COUNT" -gt 0 ]; then
              echo "**Test Summary:**"
              echo "- Total: $ECOSYSTEM_TEST_COUNT"
              echo "- ✅ Passed: $ECOSYSTEM_PASSED"
              echo "- ❌ Failed: $ECOSYSTEM_FAILED"
              echo "- ⚠️ Errors: $ECOSYSTEM_ERRORS"
              echo "- ⏭️ Skipped: $ECOSYSTEM_SKIPPED"
              echo ""

              if [ "$ECOSYSTEM_FAILED" -gt 0 ] || [ "$ECOSYSTEM_ERRORS" -gt 0 ]; then
                echo "> Note: Tests marked with \`@pytest.mark.xfail\` are expected to fail while issues are being resolved."
                echo ""
              fi
            else
              echo "No ecosystem tests were run."
              echo ""
            fi

            echo "### 📈 Benchmark Results"
            echo ""

            if [ -f benchmark_results.txt ]; then
              echo "\`\`\`"
              cat benchmark_results.txt
              echo "\`\`\`"
            else
              echo "No benchmark comparison available."
            fi

            # Add bundle size information if available
            if [ -d target/tmp ]; then
              echo -e "\n### 📦 Bundle Sizes\n"
              find target/tmp -name "*_bundled.py" -exec ls -lh {} \; | sort | awk '{
                # Extract package name from path like "target/tmp/requests_bundled.py"
                split($9, path_parts, "/")
                filename = path_parts[length(path_parts)]
                gsub(/_bundled\.py$/, "", filename)
                print "- **" filename "**: " $5
              }'
            fi
          } > ecosystem-report.md

          # Also publish to GitHub Actions Summary tab
          cat ecosystem-report.md >> "$GITHUB_STEP_SUMMARY"

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ecosystem-report.md', 'utf8');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📊 Ecosystem Test Results')
            );

            const body = report + '\n\n<sub>Generated by ecosystem-tests workflow</sub>';

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Upload test and benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ecosystem-test-results
          retention-days: 14
          if-no-files-found: ignore
          path: |
            test-results.xml
            target/criterion/
            ecosystem-report.md
            benchmark_results.txt
