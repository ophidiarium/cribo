name: Ecosystem Tests

on:
  pull_request:
    paths:
      - 'crates/**'
      - 'ecosystem/**'
      - '.github/workflows/ecosystem-tests.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  pull-requests: write
  issues: write

jobs:
  ecosystem-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Rust
        run: rustup show

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true
          python-version: 3.12

      - name: Install Python dependencies
        run: |
          uv sync --all-groups

      - name: Build cribo (release mode)
        run: cargo build --release --bin cribo

      - name: Run ecosystem tests
        continue-on-error: true
        run: |
          # Prefer the prebuilt binary for the runner
          export CARGO_BIN_EXE_cribo="$PWD/target/release/cribo"
          echo "CARGO_BIN_EXE_cribo=$CARGO_BIN_EXE_cribo" >> "$GITHUB_ENV"

          # Run all ecosystem tests with pytest
          # --tb=short for shorter tracebacks
          # -v for verbose output
          # -ra for summary of all test outcomes with reasons
          # --junit-xml for test reporting
          # Tests marked with xfail are expected to fail

          echo "::group::Running ecosystem tests with pytest"

          # Run pytest and capture exit code
          pytest ecosystem/scenarios/test_*.py \
            -v \
            --tb=short \
            -ra \
            --junit-xml=test-results.xml \
            --color=yes

          # Capture pytest exit code for potential reporting
          echo "ECOSYSTEM_PYTEST_EXIT_CODE=$?" >> $GITHUB_ENV

          echo "::endgroup::"

          # Parse results for reporting
          if [ -f test-results.xml ]; then
            # Robustly parse JUnit XML using Python
            {
              python3 <<'PYTHON_SCRIPT'
          import xml.etree.ElementTree as ET
          import sys

          try:
              tree = ET.parse("test-results.xml")
              root = tree.getroot()

              # Initialize counters
              total_tests = 0
              total_failures = 0
              total_errors = 0
              total_skipped = 0

              # Handle both single testsuite and testsuites formats
              if root.tag == "testsuites":
                  # Multiple test suites
                  for testsuite in root.findall("testsuite"):
                      total_tests += int(testsuite.get("tests", 0))
                      total_failures += int(testsuite.get("failures", 0))
                      total_errors += int(testsuite.get("errors", 0))
                      total_skipped += int(testsuite.get("skipped", 0))
              elif root.tag == "testsuite":
                  # Single test suite
                  total_tests = int(root.get("tests", 0))
                  total_failures = int(root.get("failures", 0))
                  total_errors = int(root.get("errors", 0))
                  total_skipped = int(root.get("skipped", 0))

              total_passed = total_tests - total_failures - total_errors - total_skipped

              # Output environment variables
              print(f"ECOSYSTEM_TEST_COUNT={total_tests}")
              print(f"ECOSYSTEM_PASSED={total_passed}")
              print(f"ECOSYSTEM_FAILED={total_failures}")
              print(f"ECOSYSTEM_ERRORS={total_errors}")
              print(f"ECOSYSTEM_SKIPPED={total_skipped}")

              # Also output summary for display
              print("-----------------------------------", file=sys.stderr)
              print("Test Results Summary:", file=sys.stderr)
              print(f"  Total tests: {total_tests}", file=sys.stderr)
              print(f"  Passed: {total_passed}", file=sys.stderr)
              print(f"  Failed: {total_failures}", file=sys.stderr)
              print(f"  Errors: {total_errors}", file=sys.stderr)
              print(f"  Skipped: {total_skipped}", file=sys.stderr)
              print("-----------------------------------", file=sys.stderr)

          except Exception as e:
              print(f"Error parsing test results: {e}", file=sys.stderr)
              # Output defaults on error
              print("ECOSYSTEM_TEST_COUNT=0")
              print("ECOSYSTEM_PASSED=0")
              print("ECOSYSTEM_FAILED=0")
              print("ECOSYSTEM_ERRORS=0")
              print("ECOSYSTEM_SKIPPED=0")
          PYTHON_SCRIPT
            } >> $GITHUB_ENV
          else
            # No test results file, save defaults
            echo "-----------------------------------"
            echo "Test Results Summary:"
            echo "  No test results file found"
            echo "-----------------------------------"
            {
              echo "ECOSYSTEM_TEST_COUNT=0"
              echo "ECOSYSTEM_PASSED=0"
              echo "ECOSYSTEM_FAILED=0"
              echo "ECOSYSTEM_ERRORS=0"
              echo "ECOSYSTEM_SKIPPED=0"
            } >> $GITHUB_ENV
          fi

      - name: Download main branch benchmark baseline
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          # Try to download the most recent benchmark baseline from main branch
          echo "Attempting to download benchmark baseline from main branch..."

          # Get the most recent successful workflow run on main branch
          RUN_ID=$(gh api "repos/${{ github.repository }}/actions/workflows/ecosystem-tests.yml/runs?branch=main&status=completed&per_page=10" \
            --jq '.workflow_runs[] | select(.conclusion=="success") | .id' \
            | head -1)

          if [ -n "$RUN_ID" ]; then
            echo "Found workflow run: $RUN_ID"
            # Download the artifact - it contains the criterion results
            gh run download "$RUN_ID" -n ecosystem-test-results -D /tmp/artifact 2>/dev/null || {
              echo "Could not download artifact from run $RUN_ID"
              exit 0
            }

            # Copy the criterion data if it exists
            if [ -d "/tmp/artifact/target/criterion" ]; then
              echo "Copying benchmark baseline from artifact..."
              mkdir -p target
              cp -r /tmp/artifact/target/criterion target/
              echo "Baseline copied successfully"
            else
              echo "No criterion data found in artifact"
            fi
            rm -rf /tmp/artifact
          else
            echo "No successful main branch runs found"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Run ecosystem benchmarks
        id: bench
        run: |
          # Prefer the prebuilt binary for the runner
          export CARGO_BIN_EXE_cribo="$PWD/target/release/cribo"

          # Run benchmarks and save results
          cargo bench --bench ecosystem --features bench -- --save-baseline pr-${{ github.event.pull_request.number || 'main' }}

          # If this is a PR, compare against main
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Try to load main baseline for comparison
            if cargo bench --bench ecosystem --features bench -- --load-baseline main &>/dev/null; then
              cargo bench --bench ecosystem --features bench -- --baseline main > benchmark_results.txt 2>&1 || true
            else
              echo "No main baseline found for comparison" > benchmark_results.txt
            fi
          fi

      - name: Generate benchmark report
        if: github.event_name == 'pull_request'
        id: benchmark-report
        run: |
          # Create a markdown report using grouped commands to avoid shellcheck SC2129
          {
            echo "## 📊 Ecosystem Test Results"
            echo ""
            echo "### 📋 Test Status"
            echo ""

            if [ -n "$ECOSYSTEM_TEST_COUNT" ] && [ "$ECOSYSTEM_TEST_COUNT" -gt 0 ]; then
              echo "**Test Summary:**"
              echo "- Total: $ECOSYSTEM_TEST_COUNT"
              echo "- ✅ Passed: $ECOSYSTEM_PASSED"
              echo "- ❌ Failed: $ECOSYSTEM_FAILED"
              echo "- ⚠️ Errors: $ECOSYSTEM_ERRORS"
              echo "- ⏭️ Skipped: $ECOSYSTEM_SKIPPED"
              echo ""

              if [ "$ECOSYSTEM_FAILED" -gt 0 ] || [ "$ECOSYSTEM_ERRORS" -gt 0 ]; then
                echo "> Note: Tests marked with \`@pytest.mark.xfail\` are expected to fail while issues are being resolved."
                echo ""
              fi
            else
              echo "No ecosystem tests were run."
              echo ""
            fi

            echo "### 📈 Benchmark Results"
            echo ""

            if [ -f benchmark_results.txt ]; then
              echo "\`\`\`"
              cat benchmark_results.txt
              echo "\`\`\`"
            else
              echo "No benchmark comparison available."
            fi

            # Add bundle size information if available
            if [ -d target/tmp ]; then
              echo -e "\n### 📦 Bundle Sizes\n"
              find target/tmp -name "*_bundled.py" -type f -print0 \
                | while IFS= read -r -d '' file; do
                    size_bytes=$(stat -c%s "$file" 2>/dev/null || wc -c <"$file")
                    size_human=$(numfmt --to=iec --suffix=B "$size_bytes" 2>/dev/null || echo "${size_bytes}B")
                    pkg=$(basename "$(dirname "$file")")  # target/tmp/<pkg>/...
                    echo "${size_bytes} - **${pkg}**: ${size_human}"
                  done \
                | sort -nr \
                | sed 's/^[0-9]\+ //'  # drop the numeric sort key
            fi
          } > ecosystem-report.md

          # Also publish to GitHub Actions Summary tab
          cat ecosystem-report.md >> "$GITHUB_STEP_SUMMARY"

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ecosystem-report.md', 'utf8');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📊 Ecosystem Test Results')
            );

            const body = report + '\n\n<sub>Generated by ecosystem-tests workflow</sub>';

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Upload test and benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ecosystem-test-results
          retention-days: 14
          if-no-files-found: ignore
          path: |
            test-results.xml
            target/criterion/
            ecosystem-report.md
            benchmark_results.txt
