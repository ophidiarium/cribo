name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: >-
          Version to release (e.g., 1.2.3, 1.2.3-beta.1, 1.2.3.dev1, 1.2.3a1).
          Leave empty for auto-generated version.
        required: false
        type: string
      release_type:
        description: 'Type of release'
        required: false
        default: 'manual'
        type: choice
        options:
          - manual
          - test
          - preview

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ${{ matrix.platform.os }}
    permissions:
      # Required for attestation generation
      id-token: write
      contents: read
      attestations: write
    strategy:
      matrix:
        platform:
          # Linux x86_64
          - os: ubuntu-latest
            target: 'x86_64-unknown-linux-gnu'
            rust_target: 'x86_64-unknown-linux-gnu'
          - os: ubuntu-latest
            target: 'x86_64-unknown-linux-musl'
            rust_target: 'x86_64-unknown-linux-musl'
          # Linux aarch64 (native ARM64 runners)
          - os: ubuntu-24.04-arm
            target: 'aarch64-unknown-linux-gnu'
            rust_target: 'aarch64-unknown-linux-gnu'
          - os: ubuntu-24.04-arm
            target: 'aarch64-unknown-linux-musl'
            rust_target: 'aarch64-unknown-linux-musl'
          # macOS Intel x86_64
          - os: macos-13
            target: 'x86_64-apple-darwin'
            rust_target: 'x86_64-apple-darwin'
          # macOS Apple Silicon aarch64
          - os: macos-latest
            target: 'aarch64-apple-darwin'
            rust_target: 'aarch64-apple-darwin'
          # Windows x86_64
          - os: windows-latest
            target: 'x86_64-pc-windows-msvc'
            rust_target: 'x86_64-pc-windows-msvc'
          # Windows aarch64 (native ARM64 runner)
          - os: windows-11-arm
            target: 'aarch64-pc-windows-msvc'
            rust_target: 'aarch64-pc-windows-msvc'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Fetch all history for tags

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2
        with:
          shared-key: "rust-cache-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true

      - name: Extract version from tag
        id: get_version
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          # Validate semver format - basic check for N.N.N pattern
          if ! [[ $TAG_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?$ ]]; then
            echo "::error::Invalid version format in tag: $TAG_VERSION."
            echo "::error::Expected semver format like 1.2.3 or 1.2.3-beta.1"
            exit 1
          fi
          echo "VERSION=${TAG_VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${TAG_VERSION}"

      - name: Set version for manual runs
        id: manual_version
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'manual' }}"

          if [[ -n "$INPUT_VERSION" ]]; then
            # Validate provided version format (accept both SemVer and PEP 440 formats)
            regex="^[0-9]+\.[0-9]+\.[0-9]+(\.(dev[0-9]+)|a[0-9]+|b[0-9]+|rc[0-9]+|[-][a-zA-Z0-9\.-]+)?$"
            if ! [[ $INPUT_VERSION =~ $regex ]]; then
              echo "::error::Invalid version format: $INPUT_VERSION."
              echo "::error::Expected semver (1.2.3, 1.2.3-beta.1) or PEP 440 (1.2.3.dev1, 1.2.3a1) format"
              exit 1
            fi
            MANUAL_VERSION="$INPUT_VERSION"
            echo "Using provided version: ${MANUAL_VERSION}"
          else
            # Generate auto version based on release type
            # Use SemVer compliant formats for Cargo compatibility
            case "$RELEASE_TYPE" in
              "test")
                MANUAL_VERSION="0.0.0-dev${{ github.run_number }}"
                ;;
              "preview")
                MANUAL_VERSION="0.0.0-alpha${{ github.run_number }}"
                ;;
              *)
                MANUAL_VERSION="0.0.0-dev${{ github.run_number }}"
                ;;
            esac
            echo "Generated SemVer compliant auto version: ${MANUAL_VERSION}"
          fi

          echo "VERSION=${MANUAL_VERSION}" >> $GITHUB_OUTPUT
          echo "Final version for manual run: ${MANUAL_VERSION}"

      - name: Update Cargo.toml with version
        shell: bash
        run: |
          # Set version based on trigger type
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION="${{ steps.get_version.outputs.VERSION }}"
          else
            VERSION="${{ steps.manual_version.outputs.VERSION }}"
          fi

          # Get current version for comparison
          CURRENT_VERSION=$(grep -A 1 "workspace.package" Cargo.toml | grep "version" | cut -d'"' -f2)
          echo "Current version in Cargo.toml: ${CURRENT_VERSION}"
          echo "New version to set: ${VERSION}"

          # Update version in workspace.package section
          if ! sed -i'.bak' "s/^version = \"[0-9]*\.[0-9]*\.[0-9]*.*\"/version = \"${VERSION}\"/" Cargo.toml; then
            echo "::error::Failed to update version in Cargo.toml"
            exit 1
          fi

          # Verify the update was successful
          if ! grep -q "version = \"${VERSION}\"" Cargo.toml; then
            echo "::error::Failed to verify version update in Cargo.toml"
            exit 1
          fi

          # Show the changes
          echo "Updated Cargo.toml:"
          grep -A 2 "workspace.package" Cargo.toml

      - name: Save version to file
        if: matrix.platform.rust_target == 'x86_64-unknown-linux-gnu'
        shell: bash
        run: |
          # Check if version.txt already exists (from release-please)
          if [[ -f "version.txt" ]]; then
            UPDATED_VERSION=$(cat version.txt)
            echo "Using existing version.txt from release-please: ${UPDATED_VERSION}"
          else
            # Fallback: extract from Cargo.toml (for manual releases)
            UPDATED_VERSION=$(grep -A 1 "workspace.package" Cargo.toml | grep "version" | cut -d'"' -f2)
            echo "${UPDATED_VERSION}" > version.txt
            echo "Created version.txt from Cargo.toml: ${UPDATED_VERSION}"
          fi

          # Create a JSON file with metadata for easier parsing if needed
          cat > version-metadata.json << EOF
          {
            "version": "${UPDATED_VERSION}",
            "git_tag": "${{ github.ref_name }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "triggered_by": "${{ github.event_name }}"
          }
          EOF

      - name: Set up uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6
        with:
          enable-cache: true
          ignore-nothing-to-cache: true
          python-version: '3.12'

      - name: Run Rust tests
        run: cargo test --workspace

      - name: Build wheels
        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3
        with:
          command: build
          args: --release --out dist
          # Use auto manylinux detection following maturin CI patterns
          manylinux: auto
          # Disable sccache for release builds to ensure clean builds (following maturin CI pattern)
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          target: ${{ matrix.platform.rust_target }}
          maturin-version: '1.7.4'

      - name: Build npm binary
        shell: bash
        env:
          # Clear sccache environment variables to avoid conflicts
          RUSTC_WRAPPER: ''
          SCCACHE_CACHE_SIZE: ''
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep -A 1 "workspace.package" Cargo.toml | grep "version" | cut -d'"' -f2)
          echo "Building npm binary for version: ${CURRENT_VERSION}"

          RUST_TARGET="${{ matrix.platform.rust_target }}"
          echo "Building for Rust target: ${RUST_TARGET}"

          # Determine binary name based on platform
          BINARY_NAME="cribo"
          if [[ "$RUST_TARGET" == *"windows"* ]]; then
            BINARY_NAME="cribo.exe"
          fi

          # Build the binary for the specific target
          cargo build --release --package cribo --target "$RUST_TARGET"
          BINARY_PATH="target/${RUST_TARGET}/release/${BINARY_NAME}"

          # Create npm-binaries directory with target-specific naming
          mkdir -p "target/npm-binaries/${RUST_TARGET}"

          if [[ -f "${BINARY_PATH}" ]]; then
            cp "${BINARY_PATH}" "target/npm-binaries/${RUST_TARGET}/${BINARY_NAME}"
            echo "‚úÖ Built binary: ${BINARY_PATH} -> target/npm-binaries/${RUST_TARGET}/${BINARY_NAME}"
            ls -la "target/npm-binaries/${RUST_TARGET}/${BINARY_NAME}"
          else
            echo "‚ùå Binary not found at: ${BINARY_PATH}"
            echo "Available files in target directory:"
            find target -name "${BINARY_NAME}" -type f || echo "No binaries found"
            exit 1
          fi

      - name: List built wheels
        shell: bash
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep -A 1 "workspace.package" Cargo.toml | \
            grep "version" | cut -d'"' -f2)
          echo "Building version: ${CURRENT_VERSION}"

          ls -la dist/
          echo "=== Wheel details ==="
          for wheel in dist/*.whl; do
            if [ -f "$wheel" ]; then
              echo "Wheel: $(basename "$wheel")"
              # Display WHEEL metadata content
              echo "WHEEL metadata content:"
              unzip -p "$wheel" "*.dist-info/WHEEL"
              echo "---"
            fi
          done

      - name: Store the distribution packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          # Improved artifact naming following maturin CI patterns
          name: wheels-${{ matrix.platform.target }}-${{ github.run_id }}
          path: dist/
          retention-days: 7 # Clean up after 7 days to prevent confusion

      - name: Create CLI binary archive
        shell: bash
        run: |
          # Get binary name and version
          RUST_TARGET="${{ matrix.platform.rust_target }}"
          VERSION=$(grep -A 1 "workspace.package" Cargo.toml | grep "version" | cut -d'"' -f2)
          BINARY_NAME="cribo"

          if [[ "$RUST_TARGET" == *"windows"* ]]; then
            BINARY_NAME="cribo.exe"
          fi

          # Map Rust targets to Aqua/UBI compatible naming
          case "$RUST_TARGET" in
            "x86_64-unknown-linux-gnu")
              OS="linux"
              ARCH="x86_64"
              EXT="tar.gz"
              ;;
            "x86_64-unknown-linux-musl")
              OS="linux"
              ARCH="x86_64"
              EXT="tar.gz"
              SUFFIX="-musl"
              ;;
            "aarch64-unknown-linux-gnu")
              OS="linux"
              ARCH="arm64"
              EXT="tar.gz"
              ;;
            "aarch64-unknown-linux-musl")
              OS="linux"
              ARCH="arm64"
              EXT="tar.gz"
              SUFFIX="-musl"
              ;;
            "x86_64-apple-darwin")
              OS="darwin"
              ARCH="x86_64"
              EXT="tar.gz"
              ;;
            "aarch64-apple-darwin")
              OS="darwin"
              ARCH="arm64"
              EXT="tar.gz"
              ;;
            "x86_64-pc-windows-msvc")
              OS="windows"
              ARCH="x86_64"
              EXT="zip"
              ;;
            "aarch64-pc-windows-msvc")
              OS="windows"
              ARCH="arm64"
              EXT="zip"
              ;;
            *)
              echo "Unknown target: $RUST_TARGET"
              exit 1
              ;;
          esac

          # Create archive name with version
          ARCHIVE_NAME="serpen_${VERSION}_${OS}_${ARCH}${SUFFIX:-}.${EXT}"
          echo "Creating archive: $ARCHIVE_NAME"

          # Create archive directory
          mkdir -p cli-archives

          # Create archive based on platform
          cd "target/npm-binaries/$RUST_TARGET"
          if [[ "$EXT" == "zip" ]]; then
            # Windows: use zip
            if command -v powershell &> /dev/null; then
              powershell -Command "Compress-Archive -Path '$BINARY_NAME' -DestinationPath '../../../cli-archives/$ARCHIVE_NAME'"
            else
              zip "../../../cli-archives/$ARCHIVE_NAME" "$BINARY_NAME"
            fi
          else
            # Unix: use tar.gz
            tar -czf "../../../cli-archives/$ARCHIVE_NAME" "$BINARY_NAME"
          fi

          cd - > /dev/null
          echo "Archive created: cli-archives/$ARCHIVE_NAME"
          ls -la "cli-archives/$ARCHIVE_NAME"

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          # Get archive info
          RUST_TARGET="${{ matrix.platform.rust_target }}"
          VERSION=$(grep -A 1 "workspace.package" Cargo.toml | grep "version" | cut -d'"' -f2)

          # Map target to archive naming (same logic as above)
          case "$RUST_TARGET" in
            "x86_64-unknown-linux-gnu")
              ARCHIVE_NAME="serpen_${VERSION}_linux_x86_64.tar.gz"
              ;;
            "x86_64-unknown-linux-musl")
              ARCHIVE_NAME="serpen_${VERSION}_linux_x86_64-musl.tar.gz"
              ;;
            "aarch64-unknown-linux-gnu")
              ARCHIVE_NAME="serpen_${VERSION}_linux_arm64.tar.gz"
              ;;
            "aarch64-unknown-linux-musl")
              ARCHIVE_NAME="serpen_${VERSION}_linux_arm64-musl.tar.gz"
              ;;
            "x86_64-apple-darwin")
              ARCHIVE_NAME="serpen_${VERSION}_darwin_x86_64.tar.gz"
              ;;
            "aarch64-apple-darwin")
              ARCHIVE_NAME="serpen_${VERSION}_darwin_arm64.tar.gz"
              ;;
            "x86_64-pc-windows-msvc")
              ARCHIVE_NAME="serpen_${VERSION}_windows_x86_64.zip"
              ;;
            "aarch64-pc-windows-msvc")
              ARCHIVE_NAME="serpen_${VERSION}_windows_arm64.zip"
              ;;
          esac

          # Generate checksum
          cd cli-archives
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows: use certutil
            certutil -hashfile "$ARCHIVE_NAME" SHA256 > checksum.txt
            # Extract just the hash
            grep -v "hash\|CertUtil" checksum.txt | tr -d '\r\n ' > "${ARCHIVE_NAME}.sha256"
            # Add filename to match standard format
            echo "  $ARCHIVE_NAME" >> "${ARCHIVE_NAME}.sha256"
          else
            # Unix: use sha256sum or shasum
            if command -v sha256sum &> /dev/null; then
              sha256sum "$ARCHIVE_NAME" > "${ARCHIVE_NAME}.sha256"
            elif command -v shasum &> /dev/null; then
              shasum -a 256 "$ARCHIVE_NAME" > "${ARCHIVE_NAME}.sha256"
            else
              echo "No SHA256 utility found"
              exit 1
            fi
          fi

          cd - > /dev/null
          echo "Checksum created for: $ARCHIVE_NAME"
          cat "cli-archives/${ARCHIVE_NAME}.sha256"

      - name: Store CLI archive and checksum
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: cli-archive-${{ matrix.platform.target }}-${{ github.run_id }}
          path: cli-archives/
          retention-days: 7

      - name: Store npm binary
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          # Consistent naming with platform target
          name: npm-binary-${{ matrix.platform.target }}-${{ github.run_id }}
          path: target/npm-binaries/${{ matrix.platform.rust_target }}/
          retention-days: 7

      - name: Upload version info
        if: matrix.platform.rust_target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: |
            version.txt
            version-metadata.json
          retention-days: 7 # Clean up after 7 days to prevent confusion

      # Build source distribution (sdist) - only on one platform to avoid duplicates
      - name: Build sdist
        if: matrix.platform.rust_target == 'x86_64-unknown-linux-gnu'
        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3
        with:
          command: sdist
          args: --out dist

      - name: Store source distribution
        if: matrix.platform.rust_target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: wheels-sdist-${{ github.run_id }}
          path: dist/
          retention-days: 7

      # Generate SLSA Build Provenance - only on one platform for built artifacts
      - name: Generate artifact attestation üõÇ
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            dist/*
            target/npm-binaries/*/*

  generate-npm-packages:
    name: Generate npm packages üì¶
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for attestation generation
      contents: read # Required for repository access
      attestations: write # Required for SLSA provenance attestation

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Fetch all history for tags

      - name: Download version info
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: ./

      - name: Download all npm binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: npm-binary-*-${{ github.run_id }}
          path: npm-binaries-download/
          merge-multiple: false

      - name: Organize npm binaries
        shell: bash
        run: |
          VERSION=$(cat version.txt)
          echo "Organizing npm binaries for version: ${VERSION}"

          # Create target directory structure
          mkdir -p target/npm-binaries

          echo "Downloaded artifact structure:"
          find npm-binaries-download -type f -name "cribo*" | head -20

          # Copy binaries from artifact directories to organized structure by target
          for artifact_dir in npm-binaries-download/*/; do
            if [[ -d "$artifact_dir" ]]; then
              echo "Processing artifact directory: $artifact_dir"

              # Extract target from artifact directory name (format: npm-binary-{target}-{run_id})
              artifact_name=$(basename "$artifact_dir")
              if [[ "$artifact_name" =~ npm-binary-([^-]+.*)-[0-9]+ ]]; then
                rust_target="${BASH_REMATCH[1]}"
                echo "Detected Rust target: $rust_target"

                # Create target-specific directory
                mkdir -p "target/npm-binaries/$rust_target"

                # Copy binaries for this target
                find "$artifact_dir" -name "cribo*" -type f -exec cp {} "target/npm-binaries/$rust_target/" \;
              else
                echo "Warning: Could not extract target from artifact name: $artifact_name"
                # Fallback: copy to a generic location
                find "$artifact_dir" -name "cribo*" -type f -exec cp {} target/npm-binaries/ \;
              fi
            fi
          done

          echo "Organized npm binaries by target:"
          find target/npm-binaries -type f | sort

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0 # v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Generate npm packages
        run: |
          VERSION=$(cat version.txt)
          node scripts/generate-npm-packages.js "${VERSION}" ./npm-dist ./target/npm-binaries

      - name: List generated packages
        run: |
          echo "Generated npm packages:"
          ls -la npm-dist/
          for pkg in npm-dist/*/; do
            if [ -d "$pkg" ]; then
              echo "Package: $(basename "$pkg")"
              echo "  Contents:"
              ls -la "$pkg"
              if [ -f "$pkg/package.json" ]; then
                echo "  package.json:"
                cat "$pkg/package.json"
              fi
              echo "---"
            fi
          done

      # Generate SLSA Build Provenance for npm packages
      - name: Generate npm packages attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: npm-dist/**/*

      - name: Store npm packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: npm-packages-${{ github.run_id }}
          path: npm-dist/
          retention-days: 7

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/cribo
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: wheels-*-${{ github.run_id }}
          path: dist/
          merge-multiple: true

      - name: Download version info
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: ./

      - name: Display publishing version
        shell: bash
        run: |
          echo "=== TestPyPI Release Workflow Debug Info ==="
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "=== Downloaded Artifacts ==="
          ls -la ./
          echo "=== Version Information ==="
          VERSION=$(cat version.txt)
          echo "Publishing version: ${VERSION}"

          # Display additional metadata if available
          if [ -f "version-metadata.json" ]; then
            echo "Version metadata:"
            cat version-metadata.json
          fi

      - name: Inspect wheel platform tags
        run: |
          ls -la dist/
          echo "=== Wheel platform tags ==="
          for wheel in dist/*.whl; do
            echo "Wheel: $(basename $wheel)"
            # Display WHEEL metadata content
            echo "WHEEL metadata content:"
            unzip -p "$wheel" "*.dist-info/WHEEL"
            echo "---"
          done

      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true
          skip-existing: true
          # Temporarily disable attestations until wheel tag ordering is fixed at source
          # attestations: true

  publish-to-pypi:
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    needs: [publish-to-testpypi] # Ensure TestPyPI publish succeeds first
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/cribo
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: wheels-*-${{ github.run_id }}
          path: dist/
          merge-multiple: true

      - name: Download version info
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: ./

      - name: Display publishing version
        shell: bash
        run: |
          echo "=== PyPI Release Workflow Debug Info ==="
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "=== Downloaded Artifacts ==="
          ls -la ./
          echo "=== Version Information ==="
          VERSION=$(cat version.txt)
          echo "Publishing version: ${VERSION}"

          # Display additional metadata if available
          if [ -f "version-metadata.json" ]; then
            echo "Version metadata:"
            cat version-metadata.json
          fi

      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true
          skip-existing: true
          # Temporarily disable attestations until wheel tag ordering is fixed at source
          # attestations: true

  publish-to-npm:
    name: Publish to npm üì¶
    needs: [generate-npm-packages]
    runs-on: ubuntu-latest
    environment:
      name: npm
      url: https://www.npmjs.com/package/cribo
    permissions:
      id-token: write # IMPORTANT: mandatory for npm provenance generation
      contents: read # required for checkout
      attestations: write # required for SLSA provenance attestation

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Download npm packages
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: npm-packages-${{ github.run_id }}
          path: npm-dist/

      - name: Download version info
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: ./

      - name: Display publishing info
        shell: bash
        run: |
          echo "=== npm Publishing Info ==="
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          VERSION=$(cat version.txt)
          echo "Publishing version: ${VERSION}"
          echo ""
          echo "=== Available packages ==="
          ls -la npm-dist/
          echo ""

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          VERSION=$(cat version.txt)
          node scripts/publish-npm.js "${VERSION}" ./npm-dist
