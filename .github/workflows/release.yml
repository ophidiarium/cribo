name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Fetch all history for tags

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2
        with:
          shared-key: "rust-cache-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true

      - name: Extract version from tag
        id: get_version
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          # Validate semver format - basic check for N.N.N pattern
          if ! [[ $TAG_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?$ ]]; then
            echo "::error::Invalid version format in tag: $TAG_VERSION. Expected semver format like 1.2.3 or 1.2.3-beta.1"
            exit 1
          fi
          echo "VERSION=${TAG_VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${TAG_VERSION}"

      - name: Set version for manual runs
        id: manual_version
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          MANUAL_VERSION="0.0.0-manual.${{ github.run_number }}"
          echo "VERSION=${MANUAL_VERSION}" >> $GITHUB_OUTPUT
          echo "Using manual version: ${MANUAL_VERSION}"

      - name: Update Cargo.toml with version
        shell: bash
        run: |
          # Set version based on trigger type
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION="${{ steps.get_version.outputs.VERSION }}"
          else
            VERSION="${{ steps.manual_version.outputs.VERSION }}"
          fi

          # Get current version for comparison
          CURRENT_VERSION=$(grep -A 1 "workspace.package" Cargo.toml | grep "version" | cut -d'"' -f2)
          echo "Current version in Cargo.toml: ${CURRENT_VERSION}"
          echo "New version to set: ${VERSION}"

          # Update version in workspace.package section
          if ! sed -i'.bak' "s/^version = \"[0-9]*\.[0-9]*\.[0-9]*.*\"/version = \"${VERSION}\"/" Cargo.toml; then
            echo "::error::Failed to update version in Cargo.toml"
            exit 1
          fi

          # Verify the update was successful
          if ! grep -q "version = \"${VERSION}\"" Cargo.toml; then
            echo "::error::Failed to verify version update in Cargo.toml"
            exit 1
          fi

          # Show the changes
          echo "Updated Cargo.toml:"
          grep -A 2 "workspace.package" Cargo.toml

      - name: Save version to file
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          UPDATED_VERSION=$(grep -A 1 "workspace.package" Cargo.toml | grep "version" | cut -d'"' -f2)
          echo "${UPDATED_VERSION}" > version.txt
          echo "Saved version to file: ${UPDATED_VERSION}"

          # Create a JSON file with metadata for easier parsing if needed
          cat > version-metadata.json << EOF
          {
            "version": "${UPDATED_VERSION}",
            "git_tag": "${{ github.ref_name }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "triggered_by": "${{ github.event_name }}"
          }
          EOF

      - name: Set up uv
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6
        with:
          enable-cache: true
          ignore-nothing-to-cache: true
          python-version: '3.12'

      - name: Run Rust tests
        run: cargo test --workspace

      - name: Build wheels
        uses: PyO3/maturin-action@aef21716ff3dcae8a1c301d23ec3e4446972a6e3 # v1.49.1
        with:
          command: build
          args: --release --out dist
          manylinux: 2014
          sccache: true

      - name: List built wheels
        shell: bash
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep -A 1 "workspace.package" Cargo.toml | grep "version" | cut -d'"' -f2)
          echo "Building version: ${CURRENT_VERSION}"

          ls -la dist/
          echo "=== Wheel details ==="
          for wheel in dist/*.whl; do
            if [ -f "$wheel" ]; then
              echo "Wheel: $(basename "$wheel")"
              python -c "import zipfile; z = zipfile.ZipFile('$wheel'); [print(f'  {f}') for f in z.namelist() if f.endswith('WHEEL')]"
              echo "WHEEL file contents:"
              python -c "import zipfile; z = zipfile.ZipFile('$wheel'); [print(z.read(f).decode()) for f in z.namelist() if f.endswith('WHEEL')]"
              echo "---"
            fi
          done

      - name: Store the distribution packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: python-package-distributions-${{ matrix.os }}-${{ github.run_id }}
          path: dist/
          retention-days: 7 # Clean up after 7 days to prevent confusion

      - name: Upload version info
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: |
            version.txt
            version-metadata.json
          retention-days: 7 # Clean up after 7 days to prevent confusion

  build-npm-binaries:
    name: Build npm binaries üì¶
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Fetch all history for tags

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            x86_64-unknown-linux-gnu
            x86_64-unknown-linux-musl
            aarch64-unknown-linux-gnu
            aarch64-unknown-linux-musl
            x86_64-apple-darwin
            aarch64-apple-darwin
            x86_64-pc-windows-msvc
            i686-pc-windows-msvc

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2
        with:
          shared-key: "rust-cache-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true

      - name: Download version info
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: ./

      - name: Set version from artifact
        shell: bash
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Building npm binaries for version: ${VERSION}"

      - name: Update Cargo.toml with version
        shell: bash
        run: |
          # Update version in workspace.package section
          sed -i "s/^version = \"[0-9]*\.[0-9]*\.[0-9]*.*\"/version = \"${VERSION}\"/" Cargo.toml
          echo "Updated Cargo.toml to version ${VERSION}"

      - name: Install cross for cross-compilation
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binaries for all platforms
        run: ./scripts/build-npm-binaries.sh --output-dir target/npm-binaries

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0 # v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Generate npm packages
        run: |
          node scripts/generate-npm-packages.js "${VERSION}" ./npm-dist ./target/npm-binaries

      - name: List generated packages
        run: |
          echo "Generated npm packages:"
          ls -la npm-dist/
          for pkg in npm-dist/*/; do
            if [ -d "$pkg" ]; then
              echo "Package: $(basename "$pkg")"
              echo "  Contents:"
              ls -la "$pkg"
              if [ -f "$pkg/package.json" ]; then
                echo "  package.json:"
                cat "$pkg/package.json"
              fi
              echo "---"
            fi
          done

      - name: Store npm packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: npm-packages-${{ github.run_id }}
          path: npm-dist/
          retention-days: 7

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/serpen
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: python-package-distributions-*-${{ github.run_id }}
          path: dist/
          merge-multiple: true

      - name: Download version info
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: ./

      - name: Display publishing version
        shell: bash
        run: |
          echo "=== TestPyPI Release Workflow Debug Info ==="
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "=== Downloaded Artifacts ==="
          ls -la ./
          echo "=== Version Information ==="
          VERSION=$(cat version.txt)
          echo "Publishing version: ${VERSION}"

          # Display additional metadata if available
          if [ -f "version-metadata.json" ]; then
            echo "Version metadata:"
            cat version-metadata.json
          fi

      - name: Inspect wheel platform tags
        run: |
          ls -la dist/
          echo "=== Wheel platform tags ==="
          for wheel in dist/*.whl; do
            echo "Wheel: $(basename $wheel)"
            python -c "import zipfile, sys; z = zipfile.ZipFile(sys.argv[1]); [print(f'  {f}') for f in z.namelist() if f.endswith('WHEEL')]" "$wheel"
            echo "Contents of WHEEL file:"
            python -c "import zipfile, sys; z = zipfile.ZipFile(sys.argv[1]); [print(z.read(f).decode()) for f in z.namelist() if f.endswith('WHEEL')]" "$wheel"
            echo "---"
          done

      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true
          skip-existing: true

  publish-to-pypi:
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    needs: [build, publish-to-testpypi] # Ensure TestPyPI publish succeeds first
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/serpen
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: python-package-distributions-*-${{ github.run_id }}
          path: dist/
          merge-multiple: true

      - name: Download version info
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: ./

      - name: Display publishing version
        shell: bash
        run: |
          echo "=== PyPI Release Workflow Debug Info ==="
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "=== Downloaded Artifacts ==="
          ls -la ./
          echo "=== Version Information ==="
          VERSION=$(cat version.txt)
          echo "Publishing version: ${VERSION}"

          # Display additional metadata if available
          if [ -f "version-metadata.json" ]; then
            echo "Version metadata:"
            cat version-metadata.json
          fi

      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true
          skip-existing: true

  publish-to-npm:
    name: Publish to npm üì¶
    needs: [build, build-npm-binaries]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Download npm packages
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: npm-packages-${{ github.run_id }}
          path: npm-dist/

      - name: Download version info
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: version-info-${{ github.run_id }}
          path: ./

      - name: Display publishing info
        shell: bash
        run: |
          echo "=== npm Publishing Info ==="
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          VERSION=$(cat version.txt)
          echo "Publishing version: ${VERSION}"
          echo ""
          echo "=== Available packages ==="
          ls -la npm-dist/
          echo ""

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          VERSION=$(cat version.txt)
          node scripts/publish-npm.js "${VERSION}" ./npm-dist
