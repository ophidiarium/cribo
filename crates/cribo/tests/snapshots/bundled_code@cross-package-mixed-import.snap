---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/cross-package-mixed-import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

_connection = None
def connect(database_name: str) -> str:
    """Connect to database using cross-package functionality."""
    global _connection
    if not helper_validate(database_name):
        raise ValueError(f"Invalid database name: {database_name}")
    processed_name = process_user(database_name)
    _connection = f"Connection to {processed_name}"
    return _connection
def get_connection_info() -> dict:
    """Get information about the current connection."""
    return {"status": "connected" if _connection else "disconnected", "connection": _connection, "validated_by": "helper_validate", "processed_by": "process_user"}
"""Database connection module demonstrating mixed import patterns.\n\nThis module combines:\n1. Absolute import from a different package (models.user)\n2. Relative import from within the same package (..utils.helpers)\n"""
def validate(value: str) -> bool:
    """Validate a string value.\n    \n    This function is imported by core.database.connection using\n    a relative import (..utils.helpers), demonstrating relative\n    imports within the same package hierarchy.\n    """
    return bool(value and not value.startswith("_"))
"""Helper utilities for the core package."""
def process_user(name: str) -> str:
    """Process a user-related string.\n    \n    This function is imported by core.database.connection,\n    demonstrating a cross-package absolute import.\n    """
    return f"user_{name}_processed"
"""User model providing cross-package functionality."""
helper_validate = validate
"""Test fixture demonstrating cross-package mixed import patterns.\n\nThis tests the specific pattern where a module uses both:\n1. Deep absolute imports crossing package boundaries (e.g., from models.user)\n2. Relative imports within its package (e.g., from ..utils.helpers)\n"""
def main():
    conn = connect("test_db")
    info = get_connection_info()
    print(f"Connection: {conn}")
    print(f"Connection info: {info}")
    return info
if __name__ == "__main__":
    result = main()
    print(f"Final result: {result}")
