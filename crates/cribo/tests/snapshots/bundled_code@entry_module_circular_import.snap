---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/entry_module_circular_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
child_with_init = _cribo.types.SimpleNamespace(__name__='child_with_init', __initializing__=False, __initialized__=False)
main = _cribo.types.SimpleNamespace(__name__='main', __initializing__=False, __initialized__=False)
_cribo_child_with_init__initialized = None
def _cribo_init___cribo_651687_child_with_init(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global _cribo_child_with_init__initialized
    global main
    """Child module with initialization code that imports from parent (circular dependency)."""
    TYPE_CHECKING = _cribo.typing.TYPE_CHECKING
    self.TYPE_CHECKING = TYPE_CHECKING
    if _cribo.typing.TYPE_CHECKING:
        Any = _cribo.typing.Any
        child_with_init.Any = Any
    main = _cribo_init___cribo_24f0c8_main(main)
    self.main = main

    class ConsoleUser:
        """Class that needs to use parent module's function."""

        def use_console(self):
            """Use the console function from parent module."""
            console = main.get_console()
            return f"Using console: {console}"
    ConsoleUser.__module__ = 'child_with_init'
    self.ConsoleUser = ConsoleUser
    _initialized = False
    _cribo_child_with_init__initialized = _initialized
    self._initialized = _cribo_child_with_init__initialized

    def _init():
        global _cribo_child_with_init__initialized
        if not _cribo_child_with_init__initialized:
            _cribo_child_with_init__initialized = True
            if _cribo.typing.TYPE_CHECKING:
                pass
    self._init = _init
    _init()
    self.TYPE_CHECKING = _cribo.typing.TYPE_CHECKING
    self.__initialized__ = True
    self.__initializing__ = False
    return self
child_with_init.__init__ = _cribo_init___cribo_651687_child_with_init
def _cribo_init___cribo_24f0c8_main(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global child_with_init
    """Entry module with a child that imports back from it (circular dependency)."""
    child_with_init = _cribo_init___cribo_651687_child_with_init(child_with_init)
    self.child_with_init = child_with_init

    def get_console():
        """Function that should be accessible from child module."""
        return "console object"
    self.get_console = get_console

    def main():
        """Main function."""
        obj = child_with_init.ConsoleUser()
        return obj.use_console()
    self.main = main
    if self.__name__ == "__main__":
        print(f"Result: {main()}")
    self.__initialized__ = True
    self.__initializing__ = False
    return self
main.__init__ = _cribo_init___cribo_24f0c8_main
"""Entry module with a child that imports back from it (circular dependency)."""
child_with_init = _cribo_init___cribo_651687_child_with_init(child_with_init)
def get_console():
    """Function that should be accessible from child module."""
    return "console object"
def main_main():
    """Main function."""
    obj = child_with_init.ConsoleUser()
    return obj.use_console()
if __name__ == "__main__":
    print(f"Result: {main_main()}")
