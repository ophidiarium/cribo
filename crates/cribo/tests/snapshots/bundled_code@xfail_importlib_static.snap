---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_importlib_static/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import types
def define_function(name, *args):
    return FunctionDefinition(name, list(args))
BUILTIN_FUNCTIONS = ["print", "len", "range", "sorted"]
class FunctionDefinition:

    def __init__(self, func_name, params=None):
        self.name = func_name
        self.params = params or []

    def __str__(self):
        params_str = ", ".join(self.params)
        return f"def {self.name}({params_str})"
API_VERSION = "2.0-stable"
class APIClient:

    def __init__(self, base_url="https://api.example.com"):
        self.base_url = base_url
        self.headers = {"User-Agent": "Hyphenated-Module-Client/1.0"}

    def make_request(self, endpoint):
        return f"Making request to {self.base_url}/{endpoint}"
SUPPORTED_ENDPOINTS = ["users", "posts", "comments"]
def create_client(url=None):
    return APIClient(url) if url else APIClient()
SUPPORTED_YEARS = [2022, 2023, 2024]
class Config2024:
    YEAR = 2024
    VERSION = "2024.1.0"
    FEATURES = ["new-ui", "dark-mode", "api-v3"]

    @classmethod
    def get_config(cls):
        return {"year": cls.YEAR, "version": cls.VERSION, "features": cls.FEATURES}
def load_yearly_config():
    return Config2024()
CONFIG_PREFIX = "config-"
def get_processor_info():
    return "This is a data processor from a module with a hyphen"
PROCESSOR_VERSION = "1.0-hyphenated"
class DataProcessor:

    def __init__(self):
        self.name = "Data Processor with Hyphen"

    def process(self, data):
        return f"Processing {data} with hyphenated module"
CLASS_TYPES = ["abstract", "concrete", "meta"]
class MetaClass:

    def __init__(self, name):
        self.name = name
        self.type = "metaclass"

    def describe(self):
        return f"This is a {self.type} named {self.name}"
DEFAULT_CLASS_NAME = "KeywordModule"
def create_class_instance(class_name):
    return MetaClass(class_name)
MAX_ITERATIONS = 1000
def create_loop(items):
    return ForLoop(items)
class ForLoop:

    def __init__(self, iterable):
        self.iterable = iterable
        self.index = 0

    def iterate(self):
        results = []
        for item in self.iterable:
            results.append(f"Processing: {item}")
        return results
LOOP_TYPES = ["for", "while", "comprehension"]
class ForLoop:

    def __init__(self, iterable):
        self.iterable = iterable
        self.index = 0

    def iterate(self):
        results = []
        for item in self.iterable:
            results.append(f"Processing: {item}")
        return results
def = types.SimpleNamespace()
def.define_function = define_function
def.BUILTIN_FUNCTIONS = BUILTIN_FUNCTIONS
def.FunctionDefinition = FunctionDefinition
def_module = def
api_client = types.SimpleNamespace()
api_client.API_VERSION = API_VERSION
api_client.APIClient = APIClient
api_client.SUPPORTED_ENDPOINTS = SUPPORTED_ENDPOINTS
api_client.create_client = create_client
2024_config = types.SimpleNamespace()
2024_config.SUPPORTED_YEARS = SUPPORTED_YEARS
2024_config.Config2024 = Config2024
2024_config.load_yearly_config = load_yearly_config
2024_config.CONFIG_PREFIX = CONFIG_PREFIX
config_2024 = 2024_config
data_processor = types.SimpleNamespace()
data_processor.get_processor_info = get_processor_info
data_processor.PROCESSOR_VERSION = PROCESSOR_VERSION
data_processor.DataProcessor = DataProcessor
class = types.SimpleNamespace()
class.CLASS_TYPES = CLASS_TYPES
class.MetaClass = MetaClass
class.DEFAULT_CLASS_NAME = DEFAULT_CLASS_NAME
class.create_class_instance = create_class_instance
class_module = class
for = types.SimpleNamespace()
for.MAX_ITERATIONS = MAX_ITERATIONS
for.create_loop = create_loop
for.ForLoop = ForLoop
for.LOOP_TYPES = LOOP_TYPES
for_module = for
"""Main module demonstrating importlib usage with static string literals."""
def main():
    processor = data_processor.DataProcessor()
    print(f"Processor: {processor.name}")
    print(f"Processing result: {processor.process('test data')}")
    print(f"Processor info: {data_processor.get_processor_info()}")
    print(f"Processor version: {data_processor.PROCESSOR_VERSION}")
    print()
    client = api_client.create_client()
    print(f"API request: {client.make_request('users')}")
    print(f"API version: {api_client.API_VERSION}")
    print(f"Supported endpoints: {api_client.SUPPORTED_ENDPOINTS}")
    print()
    meta = class_module.create_class_instance("TestClass")
    print(f"Class description: {meta.describe()}")
    print(f"Class types: {class_module.CLASS_TYPES}")
    print(f"Default class name: {class_module.DEFAULT_CLASS_NAME}")
    print()
    func_def = def_module.define_function("calculate", "x", "y")
    print(f"Function definition: {func_def}")
    print(f"Builtin functions: {def_module.BUILTIN_FUNCTIONS}")
    print()
    loop = for_module.create_loop(["apple", "banana", "cherry"])
    print(f"Loop results: {loop.iterate()}")
    print(f"Loop types: {for_module.LOOP_TYPES}")
    print(f"Max iterations: {for_module.MAX_ITERATIONS}")
    print()
    config = config_2024.load_yearly_config()
    print(f"Year config: {config.get_config()}")
    print(f"Supported years: {config_2024.SUPPORTED_YEARS}")
    print(f"Config prefix: {config_2024.CONFIG_PREFIX}")
if __name__ == "__main__":
    main()
if __name__ == "__main__":
    main()
