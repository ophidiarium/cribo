---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/ast_rewriting_function_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys, types
def __cribo_init___cribo_32364c_module_a():
    if '__cribo_32364c_module_a' in sys.modules:
        return sys.modules['__cribo_32364c_module_a']
    module = types.ModuleType('__cribo_32364c_module_a')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/ast_rewriting_function_name_collision/module_a.py'
    sys.modules['__cribo_32364c_module_a'] = module
    sys.modules['module_a'] = module
    """\nModule A with a process_data function.\nThis will conflict with module_b.process_data when bundled.\n"""

    def process_data(input_data: str) -> str:
        """Process data in module A's way."""
        return f"Module A processed: {input_data.upper()}"
    module.process_data = process_data

    def helper_function() -> str:
        """A helper function unique to module A."""
        return "Module A helper"
    module.helper_function = helper_function
    MODULE_NAME = "module_a"
    module.MODULE_NAME = MODULE_NAME
    return module
def __cribo_init___cribo_42a26a_module_b():
    if '__cribo_42a26a_module_b' in sys.modules:
        return sys.modules['__cribo_42a26a_module_b']
    module = types.ModuleType('__cribo_42a26a_module_b')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/ast_rewriting_function_name_collision/module_b.py'
    sys.modules['__cribo_42a26a_module_b'] = module
    sys.modules['module_b'] = module
    """\nModule B with a process_data function.\nThis will conflict with module_a.process_data when bundled.\n"""

    def process_data(input_data: str) -> str:
        """Process data in module B's way."""
        return f"Module B processed: {input_data.lower()}"
    module.process_data = process_data

    def another_helper() -> str:
        """A helper function unique to module B."""
        return "Module B helper"
    module.another_helper = another_helper
    MODULE_NAME = "module_b"
    module.MODULE_NAME = MODULE_NAME
    return module
__cribo_modules = {'module_a': '__cribo_32364c_module_a', 'module_b': '__cribo_42a26a_module_b'}
__cribo_init_functions = {'__cribo_32364c_module_a': __cribo_init___cribo_32364c_module_a, '__cribo_42a26a_module_b': __cribo_init___cribo_42a26a_module_b}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_32364c_module_a()
__cribo_init___cribo_42a26a_module_b()
"""\nFunction name collision test.\nBoth modules define a function with the same name.\n"""
process_a = sys.modules['module_a'].process_data
process_b = sys.modules['module_b'].process_data
def main():
    result_a = process_a("input from A")
    result_b = process_b("input from B")
    print(f"Module A result: {result_a}")
    print(f"Module B result: {result_b}")
    return {"module_a": result_a, "module_b": result_b}
if __name__ == "__main__":
    result = main()
    print("Result:", result)
