---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/init_reexports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import os
import types
"""Utils subpackage with re-exports."""
MAX_ITEMS = 100
DEFAULT_VALUE = "default"
"""Constants module."""
def helper_function(data):
    """Helper function for processing data."""
    return f"Helped: {data}"
"""Helper utilities."""
def format_data(data):
    """Format the processed data."""
    return f"Formatted: {data}"
"""Data formatting module."""
def process_data(data):
    """Process the input data."""
    processed = data.copy()
    processed["processed"] = True
    return processed
"""Data processing module."""
def __cribo_init___cribo_de6c46_mypackage_config():
    module = types.SimpleNamespace()
    """Configuration module."""

    class Config:
        """Configuration class."""

        def __init__(self):
            self.DEBUG = os.environ.get("DEBUG", "false").lower() == "true"
            self.LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO")
    module.Config = Config
    config = Config()
    module.config = config
    return module
def __cribo_init___cribo_a81151_mypackage():
    module = types.SimpleNamespace()
    """\nPackage initialization with re-exports.\n\nThis __init__.py demonstrates the pattern where imports are made but not directly used\nwithin this file - they are re-exports for the package interface.\nThese imports should NOT be stripped as unused, even though they don't appear\nto be used within this file itself.\n"""
    _cribo_module_mypackage_config = _cribo_temp_mypackage_config
    config = _cribo_module_mypackage_config.config
    module.config = config
    __version__ = "1.0.0"
    module.__version__ = __version__
    __all__ = ["process_data", "format_data", "config", "helper_function", "__version__"]
    DEBUG_MODE = config.DEBUG
    utils = types.SimpleNamespace()
    utils.helper_function = helper_function
    utils.MAX_ITEMS = MAX_ITEMS
    utils.DEFAULT_VALUE = DEFAULT_VALUE
    formatter = types.SimpleNamespace()
    formatter.format_data = format_data
    data_processor = types.SimpleNamespace()
    data_processor.process_data = process_data
    module.__all__ = ['process_data', 'format_data', 'config', 'helper_function', '__version__']
    module.process_data = process_data
    module.format_data = format_data
    module.helper_function = helper_function
    return module
mypackage = types.SimpleNamespace()
mypackage.utils = types.SimpleNamespace()
_cribo_temp_mypackage_config = __cribo_init___cribo_de6c46_mypackage_config()
_cribo_temp_mypackage = __cribo_init___cribo_a81151_mypackage()
mypackage.config = _cribo_temp_mypackage_config
for attr in dir(_cribo_temp_mypackage):
    if not attr.startswith('_'):
        setattr(mypackage, attr, getattr(_cribo_temp_mypackage, attr))
'''\nTest script demonstrating __init__.py re-export preservation.\n\nThis fixture tests that imports in __init__.py files are preserved even if they\nappear "unused" within that file, as they are typically re-exports for the package interface.\n'''
_cribo_module_mypackage = mypackage
format_data = _cribo_module_mypackage.format_data
process_data = _cribo_module_mypackage.process_data
config = _cribo_module_mypackage.config
def main():
    """Main function demonstrating usage of re-exported functions."""
    data = {"name": "test", "value": 42}
    processed = process_data(data)
    formatted = format_data(processed)
    result = helper_function(formatted)
    if config.DEBUG:
        print(f"Debug: {result}")
    else:
        print(result)
if __name__ == "__main__":
    main()
