---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/forward_reference_import_before_init/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import collections.abc
import functools
import types
mypkg = types.SimpleNamespace()
mypkg.__name__ = 'mypkg'
mypkg.compat = types.SimpleNamespace()
@functools.cache
def __cribo_init___cribo_4a2a5c_mypkg_compat():
    module = types.SimpleNamespace()
    module.__name__ = 'mypkg.compat'
    try:
        from fakejson import JSONDecodeError
        module.JSONDecodeError = JSONDecodeError
    except ImportError:
        from json import JSONDecodeError
        module.JSONDecodeError = JSONDecodeError
    MutableMapping = collections.abc.MutableMapping
    module.MutableMapping = MutableMapping
    return module
__cribo_init_result = __cribo_init___cribo_4a2a5c_mypkg_compat()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypkg.compat, attr, getattr(__cribo_init_result, attr))
JSONDecodeError = mypkg.compat.JSONDecodeError
class BaseException(Exception):
    """Base exception class"""
    pass
class CustomJSONError(BaseException, JSONDecodeError):
    """Custom JSON error that inherits from compat's JSONDecodeError"""

    def __init__(self, *args):
        mypkg.compat.JSONDecodeError.__init__(self, *args)
        BaseException.__init__(self, str(args[0]) if args else "")

    def __reduce__(self):
        return mypkg.compat.JSONDecodeError.__reduce__(self)
BaseException.__module__ = 'mypkg.exceptions'
CustomJSONError.__module__ = 'mypkg.exceptions'
__cribo_init___cribo_4a2a5c_mypkg_compat()
mypkg.__all__ = ['CustomJSONError']
mypkg.CustomJSONError = CustomJSONError
try:
    raise mypkg.CustomJSONError("Test error", "doc", 42)
except mypkg.CustomJSONError as e:
    print(f"Caught error: {e}")
    print("SUCCESS")
