---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
pkg = types.SimpleNamespace(__name__='pkg')
pkg_submodule = types.SimpleNamespace(__name__='pkg.submodule')
pkg.submodule = pkg_submodule
def create_object():
    """Factory function that imports from parent."""
    pkg = _cribo_init___cribo_9c0ae3_pkg()
    return pkg.MyObject()
@functools.cache
def _cribo_init___cribo_9c0ae3_pkg():
    _cribo_module = types.SimpleNamespace()
    _cribo_module.__name__ = 'pkg'
    _cribo_module.create_object = create_object

    class MyMetaclass(type):
        """The metaclass."""

        def __init__(cls, name, bases, kwds):
            super(MyMetaclass, cls).__init__(name, bases, kwds)
            if hasattr(cls, "tag"):
                print(f"Metaclass initialized {name} with tag {cls.tag}")
    MyMetaclass.__module__ = 'pkg'
    _cribo_module.MyMetaclass = MyMetaclass

    class MyObject(metaclass=MyMetaclass):
        """An object with metaclass."""
        tag = "my_object"

        def __init__(self):
            self.value = "initialized"

        def __repr__(self):
            return f"MyObject(value={self.value})"
    MyObject.__module__ = 'pkg'
    _cribo_module.MyObject = MyObject
    _cribo_module.submodule = pkg_submodule
    return _cribo_module
pkg_submodule.create_object = create_object
pkg = _cribo_init___cribo_9c0ae3_pkg()
MyObject = pkg.MyObject
create_object = create_object
obj = create_object()
print(f"Object created: {obj}")
print(f"Object tag: {obj.tag}")
