---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_all_variable_handling/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from simple_module import public_func, CONSTANT
print(f"message = {message}")
from conflict_module import message
print(f"'CONSTANT' in simple_module.__all__ = {'CONSTANT' in simple_module.__all__}")
print(f"CONSTANT = {CONSTANT}")
print(f"sub_function() = {sub_function()}")
from nested_package import exported_from_init
import simple_module
print("Testing simple module exports:")
import nested_package.submodule as sub
print("\nTesting nested package exports:")
print("\nTesting conflict resolution:")
from nested_package.submodule import sub_function
print(f"\n'public_func' in simple_module.__all__ = {'public_func' in simple_module.__all__}")
print(f"public_func() = {public_func()}")
print(f"\n'sub_function' in submodule.__all__ = {'sub_function' in sub.__all__}")
print(f"exported_from_init() = {exported_from_init()}")
from .submodule import sub_function
def exported_from_init():
    """Function exported from package __init__.py"""
    return f"From init, using helper: {helper_func()}"
from .utils import helper_func
PACKAGE_CONSTANT = "from_package"
def _internal_init_func():
    """Internal function not exported"""
    return "internal"
__all__ = ["exported_from_init", "sub_function"]
__all__ = ["message", "SHARED_NAME"]
def internal_func():
    """Internal function not in __all__"""
    return "internal"
message = "from conflict_module"
__all__backup = "this is not the real __all__"
SHARED_NAME = "conflict_module_version"
__all__ = ["public_func", "CONSTANT"]
CONSTANT = 42
def public_func():
    """A public function that should be exported."""
    return "Hello from public_func"
class InternalClass:
    pass
_PRIVATE_CONSTANT = "secret"
def _private_func():
    """A private function that should not be exported."""
    return "This is private"
def helper_func():
    """Helper function used by other modules"""
    return "helper result"
UTILS_CONSTANT = "utils value"
def another_helper():
    """Another helper function"""
    return "another helper"
__all__ = ["sub_function", "SUB_CONSTANT"]
SUB_CONSTANT = "submodule_value"
def sub_function():
    """Function from submodule"""
    return "Hello from submodule"
message = "from submodule"
def _private_sub_func():
    """Private function in submodule"""
    return "private submodule function"
