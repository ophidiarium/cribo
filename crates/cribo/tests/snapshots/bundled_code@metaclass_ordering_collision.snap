---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_ordering_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

class YAMLObjectMetaclass_1(type):
    """Another metaclass with the same name."""

    def __init__(cls, name, bases, kwds):
        super(YAMLObjectMetaclass_1, cls).__init__(name, bases, kwds)
        if 'yaml_tag' in kwds and kwds['yaml_tag'] is not None:
            cls._registered_b = True
class YAMLObject_1(metaclass=YAMLObjectMetaclass_1):
    """Another class with the same name but different metaclass."""
    yaml_tag = None

    def __init__(self):
        pass
class YAMLObjectMetaclass_2(type):
    """The metaclass for YAMLObject."""

    def __init__(cls, name, bases, kwds):
        super(YAMLObjectMetaclass_2, cls).__init__(name, bases, kwds)
        if 'yaml_tag' in kwds and kwds['yaml_tag'] is not None:
            cls._registered_a = True
class YAMLObject_2(metaclass=YAMLObjectMetaclass_2):
    """An object with metaclass from module_a."""
    yaml_tag = None

    def __init__(self):
        pass
YAMLObjectMetaclass_1.__module__ = 'module_b'
YAMLObjectMetaclass_1.__name__ = 'YAMLObjectMetaclass'
YAMLObjectMetaclass_1.__qualname__ = 'YAMLObjectMetaclass'
YAMLObject_1.__module__ = 'module_b'
YAMLObject_1.__name__ = 'YAMLObject'
YAMLObject_1.__qualname__ = 'YAMLObject'
"""Second module with same-named metaclass and class - will get renamed."""
YAMLObjectMetaclass_2.__module__ = 'module_a'
YAMLObjectMetaclass_2.__name__ = 'YAMLObjectMetaclass'
YAMLObjectMetaclass_2.__qualname__ = 'YAMLObjectMetaclass'
YAMLObject_2.__module__ = 'module_a'
YAMLObject_2.__name__ = 'YAMLObject'
YAMLObject_2.__qualname__ = 'YAMLObject'
"""First module with metaclass and class - will have original names."""
"""Test that demonstrates metaclass ordering issue with name collisions."""
YAMLObject = YAMLObject_2
YAMLObjectB = YAMLObject_1
def test_both_classes():
    """Test that both metaclass-based classes work."""

    class MyObjectA(YAMLObject):
        yaml_tag = '!myobject_a'

        def __init__(self, value):
            self.value = value
    obj_a = MyObjectA(42)
    assert obj_a.value == 42
    assert MyObjectA.yaml_tag == '!myobject_a'

    class MyObjectB(YAMLObjectB):
        yaml_tag = '!myobject_b'

        def __init__(self, value):
            self.value = value * 2
    obj_b = MyObjectB(21)
    assert obj_b.value == 42
    assert MyObjectB.yaml_tag == '!myobject_b'
    print("Both metaclass tests passed")
if __name__ == "__main__":
    test_both_classes()
