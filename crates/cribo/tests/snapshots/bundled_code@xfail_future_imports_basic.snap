---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_future_imports_basic/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import __future__
import types
def process_data_mypackage_core(data: Dict[str, Any]) -> Dict[str, Any]:
    """Process input data and return results.\n\n    This function uses forward references in type hints.\n    """
    result: ProcessingResult = {"input": data, "processed": True, "output": _transform_data(data)}
    return result
__future___mypackage_core = __future___mypackage_core.annotations
ProcessingResult = Dict[str, Any]
mypackage_core = types.SimpleNamespace()
mypackage_core.process_data = process_data_mypackage_core
mypackage_core.annotations = annotations_mypackage_core
mypackage_core.ProcessingResult = ProcessingResult
def validate_input_mypackage_submodule_utils(data: InputData) -> bool:
    """Validate input data structure.\n\n    Uses forward reference that requires future import.\n    """
    if not isinstance(data, dict):
        return False
    return "key" in data and isinstance(data.get("numbers"), list)
def format_output(data: Any) -> FormattedOutput:
    """Format data for output."""
    return f"Formatted: {data}"
__future___mypackage_submodule_utils = __future___mypackage_submodule_utils.annotations
def validate_input_mypackage_submodule_utils(data: InputData) -> bool:
    """Validate input data structure.\n\n    Uses forward reference that requires future import.\n    """
    if not isinstance(data, dict):
        return False
    return "key" in data and isinstance(data.get("numbers"), list)
mypackage_submodule_utils = types.SimpleNamespace()
mypackage_submodule_utils.validate_input = validate_input_mypackage_submodule_utils
mypackage_submodule_utils.format_output = format_output
mypackage_submodule_utils.annotations = annotations_mypackage_submodule_utils
validate_input = mypackage_submodule_utils.validate_input
process_data = mypackage_core.process_data
annotations = __future__.annotations
def main() -> None:
    """Main function with type annotations that require future import."""
    data = {"key": "value", "numbers": [1, 2, 3]}
    if validate_input(data):
        result = process_data(data)
        print(f"Processing result: {result}")
    else:
        print("Invalid input data")
def main() -> None:
    """Main function with type annotations that require future import."""
    data = {"key": "value", "numbers": [1, 2, 3]}
    if validate_input(data):
        result = process_data(data)
        print(f"Processing result: {result}")
    else:
        print("Invalid input data")
if __name__ == "__main__":
    main()
if __name__ == "__main__":
    main()
