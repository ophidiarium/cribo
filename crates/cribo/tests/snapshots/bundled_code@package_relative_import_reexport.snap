---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/package_relative_import_reexport/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg_definitions = _cribo.types.SimpleNamespace(__name__='pkg.definitions')
pkg = _cribo.types.SimpleNamespace(__name__='pkg', __initializing__=False, __initialized__=False)
pkg.definitions = pkg_definitions
"""Simple class definitions without side effects."""
class CustomError_2(Exception):
    """Custom error class."""
    pass
CustomError_2.__module__ = 'pkg.definitions'
CustomError_2.__name__ = 'CustomError'
CustomError_2.__qualname__ = 'CustomError'
class AnotherError_2(Exception):
    """Another error class."""
    pass
AnotherError_2.__module__ = 'pkg.definitions'
AnotherError_2.__name__ = 'AnotherError'
AnotherError_2.__qualname__ = 'AnotherError'
pkg_definitions.AnotherError = AnotherError_2
pkg_definitions.CustomError = CustomError_2
pkg_module_with_sideeffects = _cribo.types.SimpleNamespace(__name__='pkg.module_with_sideeffects', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_814350_pkg_module_with_sideeffects(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Module with side effects that imports and re-exports from sibling module."""
    sys = _cribo.sys
    self.sys = sys
    self.sys = sys
    definitions = pkg_definitions
    CustomError = definitions.CustomError
    self.CustomError = CustomError
    AnotherError = definitions.AnotherError
    self.AnotherError = AnotherError
    print("Module with side effects loaded", file=_cribo.sys.stderr)

    def display(msg):
        """Display a message."""
        print(msg)
    self.display = display
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_module_with_sideeffects.__init__ = _cribo_init___cribo_814350_pkg_module_with_sideeffects
pkg.module_with_sideeffects = pkg_module_with_sideeffects
"""Test case for package with relative imports and re-exports.\n\nThis tests the scenario where:\n1. A package has a module with just class definitions (pkg.definitions)\n2. Another module with side effects imports and re-exports those classes (pkg.module_with_sideeffects)\n3. The main code accesses the re-exported classes\n"""
pkg_module_with_sideeffects = _cribo_init___cribo_814350_pkg_module_with_sideeffects(pkg_module_with_sideeffects)
try:
    raise pkg.module_with_sideeffects.CustomError("test")
except pkg.module_with_sideeffects.CustomError as e:
    print(f"Caught error: {e}")
module_with_sideeffects = pkg.module_with_sideeffects
definitions = pkg.definitions
