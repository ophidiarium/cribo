---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/circular_symbol_usage/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
module_a = _cribo.types.SimpleNamespace(__name__='module_a', __initializing__=False, __initialized__=False)
module_b = _cribo.types.SimpleNamespace(__name__='module_b', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_851b00_module_a(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_b
    """Module A with circular dependency on B."""
    Optional = _cribo.typing.Optional
    self.Optional = Optional
    module_b = _cribo_init___cribo_924318_module_b(module_b)
    HelperB = module_b.HelperB
    self.HelperB = HelperB
    self.HelperB = HelperB
    UnusedFromB = module_b.UnusedFromB
    self.UnusedFromB = UnusedFromB
    self.UnusedFromB = UnusedFromB

    class FunctionA:

        def compute(self) -> str:
            helper = HelperB()
            return f"A: {helper.get_value()}"

        def unused_method(self, param: _cribo.typing.Optional["UnusedFromB"]) -> None:
            pass
    FunctionA.__module__ = 'module_a'
    self.FunctionA = FunctionA
    self.Optional = _cribo.typing.Optional
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_a.__init__ = _cribo_init___cribo_851b00_module_a
def _cribo_init___cribo_924318_module_b(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_a
    """Module B with circular dependency on A."""
    TYPE_CHECKING = _cribo.typing.TYPE_CHECKING
    self.TYPE_CHECKING = TYPE_CHECKING
    if _cribo.typing.TYPE_CHECKING:
        module_a = _cribo_init___cribo_851b00_module_a(module_a)
        module_b.module_a = module_a
        FunctionA = module_a.FunctionA
        module_b.FunctionA = FunctionA
        self.FunctionA = FunctionA

    class HelperB:

        def get_value(self) -> str:
            return "Value from B"
    HelperB.__module__ = 'module_b'
    self.HelperB = HelperB

    class UnusedFromB:

        def __init__(self):
            print("UnusedFromB initialized - this should be dead code!")

        def process(self, func_a: "FunctionA") -> str:
            return func_a.compute()
    UnusedFromB.__module__ = 'module_b'
    self.UnusedFromB = UnusedFromB
    self.TYPE_CHECKING = _cribo.typing.TYPE_CHECKING
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_b.__init__ = _cribo_init___cribo_924318_module_b
"""Test symbol usage optimization with circular dependencies."""
module_a = _cribo_init___cribo_851b00_module_a(module_a)
FunctionA = module_a.FunctionA
def main():
    result = FunctionA().compute()
    print(result)
if __name__ == "__main__":
    main()
