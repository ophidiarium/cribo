---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/future_imports_basic/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from __future__ import annotations
from typing import Dict, List, Any
from typing import Dict, Any, Union
import sys, types
def __cribo_init___cribo_251ff9_mypackage_core():
    if '__cribo_251ff9_mypackage_core' in sys.modules:
        return sys.modules['__cribo_251ff9_mypackage_core']
    module = types.ModuleType('__cribo_251ff9_mypackage_core')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/future_imports_basic/mypackage/core.py'
    sys.modules['__cribo_251ff9_mypackage_core'] = module
    sys.modules['mypackage.core'] = module
    from typing import Dict, List, Any
    module.Dict = Dict
    module.List = List
    module.Any = Any

    def process_data(data: Dict[str, Any]) -> Dict[str, Any]:
        """Process input data and return results.\n\n    This function uses forward references in type hints.\n    """
        result: ProcessingResult = {"input": data, "processed": True, "output": _transform_data(data)}
        return result
    module.process_data = process_data

    def _transform_data(data: Dict[str, Any]) -> List[str]:
        """Transform data into list format."""
        return [f"{k}={v}" for k, v in data.items()]
    ProcessingResult = Dict[str, Any]
    module.ProcessingResult = ProcessingResult
    return module
def __cribo_init___cribo_4b54ee_mypackage():
    if '__cribo_4b54ee_mypackage' in sys.modules:
        return sys.modules['__cribo_4b54ee_mypackage']
    module = types.ModuleType('__cribo_4b54ee_mypackage')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/future_imports_basic/mypackage/__init__.py'
    sys.modules['__cribo_4b54ee_mypackage'] = module
    sys.modules['mypackage'] = module
    """Package initialization with future import."""
    __version__ = "1.0.0"
    return module
def __cribo_init___cribo_635b69_mypackage_submodule_utils():
    if '__cribo_635b69_mypackage_submodule_utils' in sys.modules:
        return sys.modules['__cribo_635b69_mypackage_submodule_utils']
    module = types.ModuleType('__cribo_635b69_mypackage_submodule_utils')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/future_imports_basic/mypackage/submodule/utils.py'
    sys.modules['__cribo_635b69_mypackage_submodule_utils'] = module
    sys.modules['mypackage.submodule.utils'] = module
    from typing import Dict, Any, Union
    module.Dict = Dict
    module.Any = Any
    module.Union = Union

    def validate_input(data: InputData) -> bool:
        """Validate input data structure.\n\n    Uses forward reference that requires future import.\n    """
        if not isinstance(data, dict):
            return False
        return "key" in data and isinstance(data.get("numbers"), list)
    module.validate_input = validate_input

    def format_output(data: Any) -> FormattedOutput:
        """Format data for output."""
        return f"Formatted: {data}"
    module.format_output = format_output
    InputData = Dict[str, Any]
    module.InputData = InputData
    FormattedOutput = Union[str, Dict[str, Any]]
    module.FormattedOutput = FormattedOutput
    return module
def __cribo_init___cribo_5865a3_mypackage_submodule():
    if '__cribo_5865a3_mypackage_submodule' in sys.modules:
        return sys.modules['__cribo_5865a3_mypackage_submodule']
    module = types.ModuleType('__cribo_5865a3_mypackage_submodule')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/future_imports_basic/mypackage/submodule/__init__.py'
    sys.modules['__cribo_5865a3_mypackage_submodule'] = module
    sys.modules['mypackage.submodule'] = module
    """Submodule with future imports."""
    return module
__cribo_modules = {'mypackage.core': '__cribo_251ff9_mypackage_core', 'mypackage': '__cribo_4b54ee_mypackage', 'mypackage.submodule.utils': '__cribo_635b69_mypackage_submodule_utils', 'mypackage.submodule': '__cribo_5865a3_mypackage_submodule'}
__cribo_init_functions = {'__cribo_251ff9_mypackage_core': __cribo_init___cribo_251ff9_mypackage_core, '__cribo_4b54ee_mypackage': __cribo_init___cribo_4b54ee_mypackage, '__cribo_635b69_mypackage_submodule_utils': __cribo_init___cribo_635b69_mypackage_submodule_utils, '__cribo_5865a3_mypackage_submodule': __cribo_init___cribo_5865a3_mypackage_submodule}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_251ff9_mypackage_core()
__cribo_init___cribo_4b54ee_mypackage()
__cribo_init___cribo_635b69_mypackage_submodule_utils()
__cribo_init___cribo_5865a3_mypackage_submodule()
process_data = sys.modules['mypackage.core'].process_data
validate_input = sys.modules['mypackage.submodule.utils'].validate_input
def main() -> None:
    """Main function with type annotations that require future import."""
    data = {"key": "value", "numbers": [1, 2, 3]}
    if validate_input(data):
        result = process_data(data)
        print(f"Processing result: {result}")
    else:
        print("Invalid input data")
if __name__ == "__main__":
    main()
