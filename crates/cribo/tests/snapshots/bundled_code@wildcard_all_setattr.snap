---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/wildcard_all_setattr/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
package = types.SimpleNamespace(__name__='package')
package__subpackage = types.SimpleNamespace(__name__='package._subpackage')
package._subpackage = package__subpackage
package__subpackage_module_a = types.SimpleNamespace(__name__='package._subpackage.module_a')
package__subpackage.module_a = package__subpackage_module_a
package__subpackage_module_b = types.SimpleNamespace(__name__='package._subpackage.module_b')
package__subpackage.module_b = package__subpackage_module_b
class MyClass:
    """A class exported through wildcards."""

    def __init__(self):
        self.value = "from module_a"
def my_function():
    """A function exported through wildcards."""
    return "from module_b"
"""Subpackage that re-exports from modules using wildcards."""
"""Module B with my_function."""
MyClass.__module__ = 'package._subpackage.module_a'
"""Module A with MyClass."""
@functools.cache
def __cribo_init___cribo_cca96f_package():
    __cribo_module = types.SimpleNamespace()
    __cribo_module.__name__ = 'package'
    global MyClass, my_function
    __cribo_module.MyClass = MyClass
    __cribo_module.my_function = my_function
    """Package using wildcard imports and setattr pattern like httpx."""
    __all__ = ["MyClass", "my_function"]
    __locals = vars(__cribo_module)
    __cribo_module.__locals = __locals
    for __name in __all__:
        if not __name.startswith("__"):
            setattr(__locals[__name], "__module__", "package")
    __cribo_module._subpackage = package__subpackage
    return __cribo_module
package = __cribo_init___cribo_cca96f_package()
package__subpackage_module_b.my_function = my_function
package__subpackage_module_a.MyClass = MyClass
"""Test wildcard imports with __all__ and setattr pattern."""
package = __cribo_init___cribo_cca96f_package()
MyClass = package.MyClass
my_function = package.my_function
obj = MyClass()
print(f"MyClass instance value: {obj.value}")
print(f"my_function result: {my_function()}")
print("Success!")
