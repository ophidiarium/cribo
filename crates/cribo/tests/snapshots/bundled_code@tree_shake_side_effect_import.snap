---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/tree_shake_side_effect_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import os
import types
mypackage = types.SimpleNamespace(__name__='mypackage')
mypackage_exceptions = types.SimpleNamespace(__name__='mypackage.exceptions')
mypackage.exceptions = mypackage_exceptions
class CustomError(Exception):
    """Custom exception that is used by utils module."""
    pass
CustomError.__module__ = 'mypackage.exceptions'
@functools.cache
def __cribo_init___cribo_ddd935_mypackage():
    __cribo_module = types.SimpleNamespace()
    __cribo_module.__name__ = 'mypackage'
    print("mypackage initialized")
    __cribo_module.exceptions = mypackage_exceptions
    return __cribo_module
@functools.cache
def __cribo_init___cribo_09b9b3_mypackage_utils():
    __cribo_module = types.SimpleNamespace()
    __cribo_module.__name__ = 'mypackage.utils'
    __cribo_module.CustomError = CustomError
    DEFAULT_PATH = os.environ.get("DEFAULT_PATH", "/tmp")
    __cribo_module.DEFAULT_PATH = DEFAULT_PATH

    def process_data(data):
        """Process data, raising CustomError if data is None."""
        if data is None:
            raise CustomError("Data cannot be None")
        return f"Processed: {data}"
    __cribo_module.process_data = process_data
    return __cribo_module
mypackage.utils = __cribo_init___cribo_09b9b3_mypackage_utils()
__cribo_init_result = __cribo_init___cribo_ddd935_mypackage()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypackage, attr, getattr(__cribo_init_result, attr))
mypackage_exceptions.CustomError = CustomError
print("Test completed")
