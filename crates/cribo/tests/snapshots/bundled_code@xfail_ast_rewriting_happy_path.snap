---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_ast_rewriting_happy_path/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from enum import Enum
from typing import List
from typing import Dict, Any, Optional
import types
def format_message_utils_helpers(greeting: str, name: str) -> str:
    """Format a greeting message."""
    return f"{greeting}, {name}!"
def calculate_total_utils_helpers(values: List[int]) -> int:
    """Calculate the sum of a list of integers."""
    return sum(values)
class UserRole_models_user(Enum):
    """User role enumeration."""
    ADMIN = "admin"
    USER = "user"
    GUEST = "guest"
class UserRole_models_user(Enum):
    """User role enumeration."""
    ADMIN = "admin"
    USER = "user"
    GUEST = "guest"
class User_models_user:
    """Simple user model."""

    def __init__(self, name: str, email: str, role: UserRole=UserRole.USER):
        self.name = name
        self.email = email
        self.role = role
        self.active = True

    def __str__(self) -> str:
        return f"User(name='{self.name}', email='{self.email}', role={self.role.value})"

    def __repr__(self) -> str:
        return self.__str__()

    def activate(self) -> None:
        """Activate the user."""
        self.active = True

    def deactivate(self) -> None:
        """Deactivate the user."""
        self.active = False
class DatabaseService_services_database:
    """Service for database operations."""

    def __init__(self, database_path: str):
        self.connection_string = f"sqlite://{database_path}"
        self.connection = DatabaseConnection(self.connection_string)
        self.cache: Dict[str, Any] = {}

    def connect(self) -> bool:
        """Connect to the database."""
        return self.connection.connect()

    def query(self, sql: str) -> Optional[Dict[str, Any]]:
        """Execute a query."""
        if not self.connection.is_connected:
            self.connect()
        return {"result": f"Executed: {sql}"}

    def close(self) -> None:
        """Close the database connection."""
        self.connection.disconnect()
class DatabaseService_services_database:
    """Service for database operations."""

    def __init__(self, database_path: str):
        self.connection_string = f"sqlite://{database_path}"
        self.connection = DatabaseConnection(self.connection_string)
        self.cache: Dict[str, Any] = {}

    def connect(self) -> bool:
        """Connect to the database."""
        return self.connection.connect()

    def query(self, sql: str) -> Optional[Dict[str, Any]]:
        """Execute a query."""
        if not self.connection.is_connected:
            self.connect()
        return {"result": f"Executed: {sql}"}

    def close(self) -> None:
        """Close the database connection."""
        self.connection.disconnect()
class DatabaseConnection:
    """Represents a database connection."""

    def __init__(self, connection_string: str):
        self.connection_string = connection_string
        self.is_connected = False

    def connect(self) -> bool:
        """Connect to the database."""
        self.is_connected = True
        return True

    def disconnect(self) -> None:
        """Disconnect from the database."""
        self.is_connected = False
utils_helpers = types.SimpleNamespace()
utils_helpers.format_message = format_message_utils_helpers
utils_helpers.calculate_total = calculate_total_utils_helpers
models_user = types.SimpleNamespace()
models_user.ADMIN = ADMIN
models_user.UserRole = UserRole_models_user
models_user.User = User_models_user
services_database = types.SimpleNamespace()
services_database.DatabaseService = DatabaseService_services_database
services_database.DatabaseConnection = DatabaseConnection
DatabaseService = services_database.DatabaseService
format_message = utils_helpers.format_message
calculate_total = utils_helpers.calculate_total
User = models_user.User
UserRole = models_user.UserRole
"""\nHappy path main module that uses multiple nested modules without name collisions.\nThis should bundle cleanly without any AST rewriting for conflicts.\n"""
def main():
    user = User("Alice", "alice@example.com", UserRole.ADMIN)
    db = DatabaseService("test.db")
    message = format_message("Welcome", user.name)
    total = calculate_total([10, 20, 30])
    print(message)
    print(f"User: {user}")
    print(f"Role: {user.role.value}")
    print(f"Database: {db.connection_string}")
    print(f"Total: {total}")
    return {"user": user.name, "email": user.email, "role": user.role.value, "total": total, "message": message}
if __name__ == "__main__":
    result = main()
    print("Result:", result)
if __name__ == "__main__":
    result = main()
    print("Result:", result)
if __name__ == "__main__":
    result = main()
    print("Result:", result)
