---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/all_variable_loop_reference/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
mypkg = types.SimpleNamespace(__name__='mypkg')
mypkg__internal = types.SimpleNamespace(__name__='mypkg._internal')
mypkg._internal = mypkg__internal
class MyClass:

    def __init__(self):
        self.value = "Hello from MyClass"
def my_func():
    return "Hello from my_func"
MyClass.__module__ = 'mypkg._internal'
@functools.cache
def __cribo_init___cribo_4c9561_mypkg():
    __cribo_module = types.SimpleNamespace()
    __cribo_module.__name__ = 'mypkg'
    __cribo_module.MyClass = MyClass
    __cribo_module.my_func = my_func
    __all__ = ["MyClass", "my_func"]
    __locals = vars(__cribo_module)
    for __name in __all__:
        if not __name.startswith("__"):
            setattr(__locals[__name], "__module__", "mypkg")
    __cribo_module._internal = mypkg__internal
    return __cribo_module
mypkg = __cribo_init___cribo_4c9561_mypkg()
MyClass = MyClass
my_func = my_func
obj = MyClass()
print(obj.value)
print(my_func())
