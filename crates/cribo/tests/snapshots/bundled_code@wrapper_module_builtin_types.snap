---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_wrapper_module_builtin_types/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
pkg = types.SimpleNamespace()
pkg.__name__ = 'pkg'
pkg._internal_utils = types.SimpleNamespace()
bytes = bytes
str = str
def process_data(data):
    """Process data using compat.bytes attribute.\n\n    This will fail when bundled because the bundler skips 'bytes = bytes'\n    in compat's init function.\n    """
    if isinstance(data, compat.bytes):
        return f"Processed {len(data)} bytes"
    elif isinstance(data, compat.str):
        return f"Processed string: {data}"
    else:
        return "Unknown type"
"""Main package that creates wrapper module pattern like requests."""
"""Sessions module that creates more circular dependencies."""
"""Models module to add more complexity."""
"""Compatibility module that matches requests.compat pattern exactly."""
"""Version info."""
"""Utils module that matches requests.utils import pattern."""
"""Certs module."""
pkg.compat = compat
pkg_sessions = types.SimpleNamespace()
pkg_models = types.SimpleNamespace()
pkg_compat = types.SimpleNamespace()
pkg___version__ = types.SimpleNamespace()
pkg_utils = types.SimpleNamespace()
pkg_certs = types.SimpleNamespace()
@functools.cache
def __cribo_init___cribo_5a392a_pkg__internal_utils():
    module = types.SimpleNamespace()
    module.__name__ = 'pkg._internal_utils'
    """Internal utils that depends on compat, creating circular dependency."""
    HEADER_VALIDATORS = {"str": lambda x: isinstance(x, builtin_str), "bytes": lambda x: isinstance(x, bytes)}
    module.HEADER_VALIDATORS = HEADER_VALIDATORS

    def to_native_string(value):
        """Convert to native string."""
        if isinstance(value, builtin_str):
            return value
        return str(value)
    module.to_native_string = to_native_string
    return module
pkg._internal_utils = __cribo_init___cribo_5a392a_pkg__internal_utils()
pkg.__version__ = pkg___version__
pkg.certs = pkg_certs
pkg.models = pkg_models
pkg.sessions = pkg_sessions
utils = types.SimpleNamespace()
compat = types.SimpleNamespace()
utils.process_data = process_data
compat.bytes = bytes
compat.str = str
compat.bytes = bytes
compat.str = str
pkg_compat.bytes = bytes
pkg_compat.str = str
pkg_utils.process_data = process_data
"""Test wrapper module pattern that triggers init functions with builtin types bug.\n\nThis reproduces the exact pattern from requests where:\n1. Multiple modules form circular dependencies (wrapper modules)\n2. One wrapper module (compat) has self-referential builtin assignments\n3. Another wrapper module (utils) accesses these as attributes\n4. The bundler generates init functions for wrapper modules\n"""
pkg.process_data = process_data
result = pkg.process_data(b"test")
print(f"Result: {result}")
print("Success!")
