---
source: crates/cribo/tests/integration_tests.rs
description: Bundle and requirements generation for project with third-party dependencies
expression: output
---
=== BUNDLE CONTENT ===
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import re
from typing import Union
from typing import Optional
import json
import sys, types
def __cribo_init___cribo_c467fa_utils_validation():
    if '__cribo_c467fa_utils_validation' in sys.modules:
        return sys.modules['__cribo_c467fa_utils_validation']
    module = types.ModuleType('__cribo_c467fa_utils_validation')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/pydantic_project/utils/validation.py'
    sys.modules['__cribo_c467fa_utils_validation'] = module
    sys.modules['utils.validation'] = module
    """Validation utilities."""
    import re
    module.re = re
    from typing import Union
    module.Union = Union

    def validate_email(email: str) -> bool:
        """Simple email validation."""
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return bool(re.match(pattern, email))
    module.validate_email = validate_email

    def sanitize_input(text: str) -> str:
        """Sanitize input text."""
        dangerous_chars = ['<', '>', '"', "'", '&']
        sanitized = text
        for char in dangerous_chars:
            sanitized = sanitized.replace(char, '')
        return sanitized.strip()
    module.sanitize_input = sanitize_input

    def validate_age(age: Union[int, str]) -> bool:
        """Validate age value."""
        try:
            age_int = int(age)
            return 0 <= age_int <= 150
        except (ValueError, TypeError):
            return False
    module.validate_age = validate_age
    return module
def __cribo_init___cribo_507edd_utils():
    if '__cribo_507edd_utils' in sys.modules:
        return sys.modules['__cribo_507edd_utils']
    module = types.ModuleType('__cribo_507edd_utils')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/pydantic_project/utils/__init__.py'
    sys.modules['__cribo_507edd_utils'] = module
    sys.modules['utils'] = module
    """Utils package initialization."""
    validate_email = sys.modules['utils.validation'].validate_email
    sanitize_input = sys.modules['utils.validation'].sanitize_input
    validate_age = sys.modules['utils.validation'].validate_age
    module.validate_email = validate_email
    module.sanitize_input = sanitize_input
    module.validate_age = validate_age
    __all__ = ["validate_email", "sanitize_input", "validate_age"]
    module.__all__ = ['validate_email', 'sanitize_input', 'validate_age']
    return module
def __cribo_init___cribo_5993b7_schemas_user():
    if '__cribo_5993b7_schemas_user' in sys.modules:
        return sys.modules['__cribo_5993b7_schemas_user']
    module = types.ModuleType('__cribo_5993b7_schemas_user')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/pydantic_project/schemas/user.py'
    sys.modules['__cribo_5993b7_schemas_user'] = module
    sys.modules['schemas.user'] = module
    """User schema definitions using Pydantic."""
    from pydantic import BaseModel, EmailStr, Field
    module.BaseModel = BaseModel
    module.EmailStr = EmailStr
    module.Field = Field
    from typing import Optional
    module.Optional = Optional

    class UserSchema(BaseModel):
        """User model with Pydantic validation."""
        name: str = Field(..., min_length=1, max_length=100, description="User's full name")
        email: EmailStr = Field(..., description="User's email address")
        age: int = Field(..., ge=0, le=150, description="User's age")
        is_active: bool = Field(default=True, description="Whether the user is active")
        bio: Optional[str] = Field(default=None, max_length=500, description="User's biography")

        class Config:
            """Pydantic configuration."""
            json_encoders = {}
            schema_extra = {"example": {"name": "John Doe", "email": "john@example.com", "age": 30, "is_active": True, "bio": "Software developer"}}
    module.UserSchema = UserSchema

    class CreateUserRequest(BaseModel):
        """Request model for creating a new user."""
        name: str = Field(..., min_length=1, max_length=100)
        email: EmailStr
        age: Optional[int] = Field(default=None, ge=0, le=150)
        bio: Optional[str] = Field(default=None, max_length=500)
    module.CreateUserRequest = CreateUserRequest

    class UserResponse(BaseModel):
        """Response model for user data."""
        id: int
        name: str
        email: str
        age: int
        is_active: bool
        bio: Optional[str] = None
    module.UserResponse = UserResponse
    return module
def __cribo_init___cribo_6e1438_schemas():
    if '__cribo_6e1438_schemas' in sys.modules:
        return sys.modules['__cribo_6e1438_schemas']
    module = types.ModuleType('__cribo_6e1438_schemas')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/pydantic_project/schemas/__init__.py'
    sys.modules['__cribo_6e1438_schemas'] = module
    sys.modules['schemas'] = module
    """Schemas package initialization."""
    UserSchema = sys.modules['schemas.user'].UserSchema
    CreateUserRequest = sys.modules['schemas.user'].CreateUserRequest
    UserResponse = sys.modules['schemas.user'].UserResponse
    module.UserSchema = UserSchema
    module.CreateUserRequest = CreateUserRequest
    module.UserResponse = UserResponse
    __all__ = ["UserSchema", "CreateUserRequest", "UserResponse"]
    module.__all__ = ['UserSchema', 'CreateUserRequest', 'UserResponse']
    return module
__cribo_modules = {'utils.validation': '__cribo_c467fa_utils_validation', 'utils': '__cribo_507edd_utils', 'schemas.user': '__cribo_5993b7_schemas_user', 'schemas': '__cribo_6e1438_schemas'}
__cribo_init_functions = {'__cribo_c467fa_utils_validation': __cribo_init___cribo_c467fa_utils_validation, '__cribo_507edd_utils': __cribo_init___cribo_507edd_utils, '__cribo_5993b7_schemas_user': __cribo_init___cribo_5993b7_schemas_user, '__cribo_6e1438_schemas': __cribo_init___cribo_6e1438_schemas}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_c467fa_utils_validation()
__cribo_init___cribo_507edd_utils()
__cribo_init___cribo_5993b7_schemas_user()
__cribo_init___cribo_6e1438_schemas()
"""Pydantic test project entry point."""
import json
from pydantic import ValidationError
UserSchema = sys.modules['schemas.user'].UserSchema
CreateUserRequest = sys.modules['schemas.user'].CreateUserRequest
validate_email = sys.modules['utils.validation'].validate_email
def main():
    """Main function demonstrating Pydantic usage."""
    user_data = {"name": "John Doe", "email": "john@example.com", "age": 25}
    try:
        user = UserSchema(**user_data)
        print(f"Created user: {user}")
        if validate_email(user.email):
            print("Email validation passed")
        user_json = user.model_dump_json()
        print(f"User JSON: {user_json}")
        request = CreateUserRequest(name="Jane Doe", email="jane@example.com")
        print(f"Create request: {request}")
    except ValidationError as e:
        print(f"Validation error: {e}")
if __name__ == "__main__":
    main()
=== END BUNDLE CONTENT ===

=== REQUIREMENTS.TXT ===
pydantic
=== END REQUIREMENTS.TXT ===
