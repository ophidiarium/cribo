---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_no_ops_multimodule_self_refs/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from os import path
from typing import Any, Dict, List, Optional
import os
import sys
import types
"""Models package."""
"""Core package with self-references."""
def __cribo_init___cribo_aec1d1_core_config():
    module = types.SimpleNamespace()
    """Configuration module with self-references."""
    DEBUG = os.environ.get("DEBUG", "false").lower() == "true"
    module.DEBUG = DEBUG

    class Settings:
        """Settings class with self-references."""
        app_name = "TestApp"
        version = "1.0.0"

        def __init__(self):
            self.debug = DEBUG
            self.config = self._load_config()
            self.debug = self.debug
            config_copy = self.config

        def _load_config(self) -> Dict[str, Any]:
            """Load configuration with self-references."""
            base_config = {"app_name": self.app_name, "version": self.version, "debug": DEBUG}
            for key in base_config:
                env_value = os.environ.get(key.upper())
                if env_value:
                    base_config[key] = env_value
            return base_config

        def get(self, key: str, default: Any=None) -> Any:
            """Get config value with self-references."""
            value = self.config.get(key, default)
            return value
    module.Settings = Settings
    CONFIG = Settings()
    module.CONFIG = CONFIG

    def get_setting(name: str) -> Any:
        """Get a setting with self-references."""
        result = CONFIG.get(name)
        return result
    module.get_setting = get_setting
    DEFAULT_CONFIG = {"timeout": 30, "retries": 3, "buffer_size": 1024}
    module.DEFAULT_CONFIG = DEFAULT_CONFIG
    config_getter = lambda k: CONFIG.get(k)
    module.config_getter = config_getter
    return module
def __cribo_init___cribo_708a84_utils_constants():
    module = types.SimpleNamespace()
    """Constants module with self-references."""
    MAX_VALUE = 1000
    module.MAX_VALUE = MAX_VALUE
    MIN_VALUE = 0
    module.MIN_VALUE = MIN_VALUE
    DEFAULT_NAME = "default"
    module.DEFAULT_NAME = DEFAULT_NAME
    CONFIG_DICT = {"max": MAX_VALUE, "min": MIN_VALUE, "name": DEFAULT_NAME}
    module.CONFIG_DICT = CONFIG_DICT
    CONFIG_LIST = [MAX_VALUE, MIN_VALUE, DEFAULT_NAME]
    module.CONFIG_LIST = CONFIG_LIST
    COMPUTED_VALUE = MAX_VALUE - MIN_VALUE
    module.COMPUTED_VALUE = COMPUTED_VALUE
    LIMITS = MIN_VALUE, MAX_VALUE
    module.LIMITS = LIMITS
    VALID_NAMES = {"admin", "user", "guest"}
    module.VALID_NAMES = VALID_NAMES
    if MAX_VALUE > 100:
        HIGH_THRESHOLD = True
    else:
        HIGH_THRESHOLD = False
    return module
def __cribo_init___cribo_2811ba_models_user():
    module = types.SimpleNamespace()
    """User model with self-references."""
    _cribo_module_utils_helpers = __cribo_init___cribo_b84d0d_utils_helpers()
    validate = _cribo_module_utils_helpers.validate
    Logger = _cribo_module_utils_helpers.Logger

    class User:
        """User class with self-references."""
        user_count = 0

        def __init__(self, name: str):
            self.name = name
            self.id = self._generate_id()
            User.user_count += 1
            self.active = True
            self.active = self.active
            logger = Logger(f"user_{self.id}")
            self.logger = logger

        def _generate_id(self) -> int:
            """Generate user ID with self-references."""
            base_id = User.user_count * 1000
            import random
            offset = random.randint(1, 999)
            final_id = base_id + offset
            return final_id

        def update_name(self, new_name: str):
            """Update name with self-references."""
            if validate(new_name):
                old_name = self.name
                self.name = new_name
                self.logger.log(f"Name updated from {old_name} to {new_name}")

        def __repr__(self):
            """String representation."""
            repr_str = f"User(name={self.name}, id={self.id})"
            return repr_str
    module.User = User

    class UserManager:
        """Manager class with self-references."""

        def __init__(self):
            self.users: List[User] = []
            self.logger = Logger("user_manager")
            users_copy = self.users
            logger_ref = self.logger

        def add_user(self, user: User) -> bool:
            """Add user with self-references."""
            for existing in self.users:
                if existing.id == user.id:
                    return False
            self.users.append(user)
            message = f"Added user: {user.name}"
            self.logger.log(message)
            return True

        def find_user(self, name: str) -> Optional[User]:
            """Find user with self-references."""
            matching = (u for u in self.users if u.name == name)
            try:
                found = next(matching)
                return found
            except StopIteration:
                return None

        def get_active_users(self) -> List[User]:
            """Get active users with self-references."""
            active = [u for u in self.users if u.active]
            active.sort(key=lambda u: u.name)
            return active
    module.UserManager = UserManager

    def create_admin_user() -> User:
        """Create admin user with self-references."""
        admin = User("admin")
        admin.is_admin = True
        admin.is_admin = admin.is_admin
        return admin
    module.create_admin_user = create_admin_user
    default_manager = UserManager()
    module.default_manager = default_manager
    return module
def __cribo_init___cribo_5e767a_core_processor():
    module = types.SimpleNamespace()
    """Data processor module with self-references."""
    _cribo_module_utils_helpers = __cribo_init___cribo_b84d0d_utils_helpers()
    Logger = _cribo_module_utils_helpers.Logger
    validate = _cribo_module_utils_helpers.validate

    class DataProcessor:
        """Processor class with self-references."""
        version = "1.0"
        enabled = True

        def __init__(self):
            self.logger = Logger("processor")
            self.cache = {}
            cache_size = 100
            self.max_cache_size = cache_size

        def process(self, items: List[Any]) -> List[Any]:
            """Process items with self-references."""
            _cribo_module_utils_constants = __cribo_init___cribo_708a84_utils_constants()
            MAX_VALUE = _cribo_module_utils_constants.MAX_VALUE
            results = []
            for i, item in enumerate(items):
                if item in self.cache:
                    cached = self.cache[item]
                    results.append(cached)
                else:
                    processed = self._process_item(item)
                    self.cache[item] = processed
                    results.append(processed)
            return results

        def _process_item(self, item: Any) -> Any:
            """Process a single item."""
            if isinstance(item, (int, float)):
                result = item * 2
                return result
            else:
                result = str(item).upper()
                return result

        @staticmethod
        def static_process(data: Any) -> Any:
            """Static method with self-references."""
            output = data if data else None
            return output

        @classmethod
        def from_config(cls, config: dict):
            """Class method with self-references."""
            instance = cls()
            if "cache_size" in config:
                size = config["cache_size"]
                instance.max_cache_size = size
            return instance
    module.DataProcessor = DataProcessor

    def transform(data: List[Any]) -> List[Any]:
        """Transform data with self-references."""
        processor = DataProcessor()

        def apply_transform(item):
            return processor._process_item(item)
        if validate(data):
            transformed = [apply_transform(item) for item in data]
            return transformed
        return data
    module.transform = transform
    _processor_instance = DataProcessor()
    return module
def __cribo_init___cribo_b84d0d_utils_helpers():
    module = types.SimpleNamespace()
    """Helper utilities with self-reference patterns."""
    DEFAULT_TIMEOUT = 30
    module.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT
    DEFAULT_RETRIES = 3
    module.DEFAULT_RETRIES = DEFAULT_RETRIES

    class Logger:
        """Logger class with self-references."""
        default_level = "INFO"

        def __init__(self, name: str):
            self.name = name
            self.level = self.default_level
            self.level = self.level

        def log(self, message: str):
            """Log a message."""
            formatted = f"[{self.name}] {message}"
            print(formatted)
    module.Logger = Logger

    def process_data(data: List[Any]) -> List[Any]:
        """Process data with self-references."""
        result = []
        count = 0
        for item in data:
            processed = item * 2 if isinstance(item, (int, float)) else str(item)
            result.append(processed)
            count += 1
        return result
    module.process_data = process_data

    def validate(data: Any) -> bool:
        """Validate data with self-references."""
        if data is None:
            return False

        def is_valid_item(item):
            return item is not None
        if isinstance(data, list):
            valid = all(is_valid_item(item) for item in data)
            return valid
        return True
    module.validate = validate

    def helper_function():
        """Helper function for imports."""
        value = 42
        return value
    module.helper_function = helper_function

    def get_config() -> Dict[str, Any]:
        """Get configuration with self-references."""
        config = {"timeout": DEFAULT_TIMEOUT, "retries": DEFAULT_RETRIES, "debug": False}
        filtered = {k: v for k, v in config.items() if v is not None}
        return filtered
    module.get_config = get_config
    _private_var = 100
    if True:
        conditional_var = 200
    return module
core = types.SimpleNamespace()
models = types.SimpleNamespace()
utils = types.SimpleNamespace()
utils.helpers = __cribo_init___cribo_b84d0d_utils_helpers()
models.user = __cribo_init___cribo_2811ba_models_user()
utils.constants = __cribo_init___cribo_708a84_utils_constants()
core.processor = __cribo_init___cribo_5e767a_core_processor()
core.config = __cribo_init___cribo_aec1d1_core_config()
User = models.user.User
UserManager = models.user.UserManager
DataProcessor = core.processor.DataProcessor
transform = core.processor.transform
CONFIG = core.config.CONFIG
Settings = core.config.Settings
"""Test fixture for self-reference assignments across multiple modules."""
process_data_1 = utils.helpers.process_data
process_data = process_data_1
validate_1 = utils.helpers.validate
validate = validate_1
Logger_1 = utils.helpers.Logger
Logger = Logger_1
constants = utils.constants
core = types.SimpleNamespace()
core.__all__ = ['DataProcessor', 'transform', 'CONFIG', 'Settings']
core.DataProcessor = DataProcessor_2
core.transform = transform_2
core.CONFIG = CONFIG_2
core.Settings = Settings_2
models = types.SimpleNamespace()
result = None
data = []
def main():
    """Main function with self-references in function scope."""
    helper_function = utils.helpers.helper_function
    CONFIG = core.config.CONFIG
    logger = Logger("main")
    processor = DataProcessor()
    user_manager = UserManager()
    raw_data = [1, 2, 3, 4, 5]
    if validate(raw_data):
        processed = process_data(raw_data)
        transformed = transform(processed)
        user = User("test_user")
        user_manager.add_user(user)
        max_value = constants.MAX_VALUE
        logger.log(f"Processed {len(transformed)} items, max value: {max_value}")
        return transformed
    return None
class MainController:
    """Class with self-references in methods."""

    def __init__(self):
        self.processor = DataProcessor_1()
        self.logger = Logger_1("controller")
        processor = DataProcessor_1()

    def run(self):
        """Method with various self-references."""
        get_config = utils.helpers.get_config
        config = get_config()
        result = self.processor.process([1, 2, 3])
        temp = result if result else result
        return result
if __name__ == "__main__":
    controller = MainController()
    results = main()
    if results:
        print(f"Success: {len(results)} items processed")
    else:
        print("No results")
    controller.run()
