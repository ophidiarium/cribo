---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/ast_rewriting_class_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys, types
def __cribo_init___cribo_b41a21_models():
    if '__cribo_b41a21_models' in sys.modules:
        return sys.modules['__cribo_b41a21_models']
    module = types.ModuleType('__cribo_b41a21_models')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/ast_rewriting_class_name_collision/models.py'
    sys.modules['__cribo_b41a21_models'] = module
    sys.modules['models'] = module
    """\nModels module with User and Product classes.\nThese will conflict with entities.py when bundled.\n"""

    class User:
        """User model for data persistence."""

        def __init__(self, name: str, email: str):
            self.name = name
            self.email = email
            self.id = None

        def __str__(self) -> str:
            return f"Model User(name='{self.name}', email='{self.email}')"
    module.User = User

    class Product:
        """Product model for catalog."""

        def __init__(self, name: str, price: float):
            self.name = name
            self.price = price
            self.id = None

        def __str__(self) -> str:
            return f"Model Product(name='{self.name}', price={self.price})"
    module.Product = Product

    def create_user(name: str, email: str) -> User:
        """Factory function for creating users."""
        return User(name, email)
    module.create_user = create_user
    return module
def __cribo_init___cribo_634f64_entities():
    if '__cribo_634f64_entities' in sys.modules:
        return sys.modules['__cribo_634f64_entities']
    module = types.ModuleType('__cribo_634f64_entities')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/ast_rewriting_class_name_collision/entities.py'
    sys.modules['__cribo_634f64_entities'] = module
    sys.modules['entities'] = module
    """\nEntities module with User and Product classes.\nThese will conflict with models.py when bundled.\n"""

    class User:
        """User entity for business logic."""

        def __init__(self, name: str, age: int):
            self.name = name
            self.age = age
            self.active = True

        def __str__(self) -> str:
            return f"Entity User(name='{self.name}', age={self.age})"
    module.User = User

    class Product:
        """Product entity for business logic."""

        def __init__(self, sku: str, name: str):
            self.sku = sku
            self.name = name
            self.available = True

        def __str__(self) -> str:
            return f"Entity Product(sku='{self.sku}', name='{self.name}')"
    module.Product = Product

    def create_product(sku: str, name: str) -> Product:
        """Factory function for creating products."""
        return Product(sku, name)
    module.create_product = create_product
    return module
__cribo_modules = {'models': '__cribo_b41a21_models', 'entities': '__cribo_634f64_entities'}
__cribo_init_functions = {'__cribo_b41a21_models': __cribo_init___cribo_b41a21_models, '__cribo_634f64_entities': __cribo_init___cribo_634f64_entities}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_b41a21_models()
__cribo_init___cribo_634f64_entities()
"""\nClass name collision test.\nBoth modules define classes with the same names.\n"""
ModelUser = sys.modules['models'].User
ModelProduct = sys.modules['models'].Product
EntityUser = sys.modules['entities'].User
EntityProduct = sys.modules['entities'].Product
def main():
    model_user = ModelUser("Alice", "alice@example.com")
    entity_user = EntityUser("Bob", 25)
    model_product = ModelProduct("Widget", 19.99)
    entity_product = EntityProduct("P001", "Gadget")
    print(f"Model User: {model_user}")
    print(f"Entity User: {entity_user}")
    print(f"Model Product: {model_product}")
    print(f"Entity Product: {entity_product}")
    return {"model_user": str(model_user), "entity_user": str(entity_user), "model_product": str(model_product), "entity_product": str(entity_product)}
if __name__ == "__main__":
    result = main()
    print("Result:", result)
