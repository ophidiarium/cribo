---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/namespace_attribute_reference/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
mypkg = types.SimpleNamespace(__name__='mypkg')
class MyError(Exception):
    """Base exception class"""
    pass
@functools.cache
def _cribo_init___cribo_19d82f_mypkg_compat():
    _cribo_module = types.SimpleNamespace()
    _cribo_module.__name__ = 'mypkg.compat'
    try:
        from json import JSONDecodeError
        _cribo_module.JSONDecodeError = JSONDecodeError
    except ImportError:

        class JSONDecodeError(ValueError):

            def __init__(self, msg, doc, pos):
                super().__init__(msg)
                self.msg = msg
                self.doc = doc
                self.pos = pos
    bytes = __import__('builtins').bytes
    _cribo_module.bytes = bytes
    basestring = str
    _cribo_module.basestring = basestring
    return _cribo_module
mypkg.compat = _cribo_init___cribo_19d82f_mypkg_compat()
class MyJSONError(MyError, mypkg.compat.JSONDecodeError):
    """JSON error that inherits from compat JSONDecodeError"""

    def __init__(self, *args):
        mypkg.compat.JSONDecodeError.__init__(self, *args)
        MyError.__init__(self, str(args[0]) if args else "")
MyError.__module__ = 'mypkg.exceptions'
MyJSONError.__module__ = 'mypkg.exceptions'
mypkg_exceptions = types.SimpleNamespace(__name__='mypkg.exceptions')
mypkg.exceptions = mypkg_exceptions
mypkg.compat = _cribo_init___cribo_19d82f_mypkg_compat()
exceptions = mypkg_exceptions
mypkg_exceptions.MyError = MyError
mypkg_exceptions.MyJSONError = MyJSONError
try:
    raise MyJSONError("Test error", "doc", 42)
except MyJSONError as e:
    print(f"Caught error: {e}")
    print("SUCCESS")
