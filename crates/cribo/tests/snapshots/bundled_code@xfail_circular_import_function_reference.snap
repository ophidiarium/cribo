---
source: crates/cribo/tests/test_bundling_snapshots.rs
assertion_line: 560
input_file: crates/cribo/tests/fixtures/xfail_circular_import_function_reference/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg_adapters = _cribo.types.SimpleNamespace(__name__='pkg.adapters', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_12d613_pkg_adapters(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        self.__initializing__ = False
        return self
    """Adapters module that imports a function from auth."""
    pkg_adapters.__initializing__ = True
    __cribo_init_result = _cribo_init___cribo_6d9930_pkg(pkg)
    for attr in dir(__cribo_init_result):
        if not attr.startswith('_'):
            setattr(pkg, attr, getattr(__cribo_init_result, attr))
    global pkg_auth
    pkg_adapters.__initializing__ = True
    pkg_auth = _cribo_init___cribo_e94ab8_pkg_auth(pkg_auth)
    _basic_auth_str = pkg.auth._basic_auth_str
    self._basic_auth_str = _basic_auth_str
    pkg_adapters.__initializing__ = True
    __cribo_init_result = _cribo_init___cribo_6d9930_pkg(pkg)
    for attr in dir(__cribo_init_result):
        if not attr.startswith('_'):
            setattr(pkg, attr, getattr(__cribo_init_result, attr))
    global pkg_models
    pkg_adapters.__initializing__ = True
    pkg_models = _cribo_init___cribo_01ad7c_pkg_models(pkg_models)
    BaseModel = pkg.models.BaseModel
    self.BaseModel = BaseModel

    class Adapter(BaseModel):
        """Adapter class that uses auth functionality."""

        def __init__(self):
            super().__init__()
            self.auth_header = None

        def use_auth(self, username, password):
            """Use the imported auth function."""
            self.auth_header = _basic_auth_str(username, password)
            print(f"Auth header set: {self.auth_header}")
            return self.auth_header
    Adapter.__module__ = 'pkg.adapters'
    self.Adapter = Adapter
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_adapters.__init__ = _cribo_init___cribo_12d613_pkg_adapters
pkg = _cribo.types.SimpleNamespace(__name__='pkg', __initializing__=False, __initialized__=False)
pkg.adapters = pkg_adapters
pkg_models = _cribo.types.SimpleNamespace(__name__='pkg.models', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_01ad7c_pkg_models(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        self.__initializing__ = False
        return self
    """Models module that creates part of the circular chain."""
    pkg_models.__initializing__ = True
    __cribo_init_result = _cribo_init___cribo_6d9930_pkg(pkg)
    for attr in dir(__cribo_init_result):
        if not attr.startswith('_'):
            setattr(pkg, attr, getattr(__cribo_init_result, attr))
    global pkg_adapters
    pkg_models.__initializing__ = True
    pkg_adapters = _cribo_init___cribo_12d613_pkg_adapters(pkg_adapters)
    _adapters_module = pkg.adapters
    self._adapters_module = _adapters_module

    class BaseModel:
        """Base model class."""

        def __init__(self):
            self.model_type = "base"

        def get_adapter_class(self):
            """Reference to adapter class (creates circular dependency)."""
            return _adapters_module.Adapter if hasattr(_adapters_module, "Adapter") else None
    BaseModel.__module__ = 'pkg.models'
    self.BaseModel = BaseModel
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_models.__init__ = _cribo_init___cribo_01ad7c_pkg_models
pkg.models = pkg_models
pkg_utils = _cribo.types.SimpleNamespace(__name__='pkg.utils', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_bdb497_pkg_utils(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        self.__initializing__ = False
        return self
    """Utils module that completes the circular chain."""
    pkg_utils.__initializing__ = True
    __cribo_init_result = _cribo_init___cribo_6d9930_pkg(pkg)
    for attr in dir(__cribo_init_result):
        if not attr.startswith('_'):
            setattr(pkg, attr, getattr(__cribo_init_result, attr))
    global pkg_models
    pkg_utils.__initializing__ = True
    pkg_models = _cribo_init___cribo_01ad7c_pkg_models(pkg_models)
    BaseModel = pkg.models.BaseModel
    self.BaseModel = BaseModel

    def format_credentials(username, password):
        """Format credentials for auth."""
        if BaseModel:
            return f"{username}:{password}"
        return ""
    self.format_credentials = format_credentials
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_utils.__init__ = _cribo_init___cribo_bdb497_pkg_utils
pkg.utils = pkg_utils
pkg_auth = _cribo.types.SimpleNamespace(__name__='pkg.auth', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_e94ab8_pkg_auth(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        self.__initializing__ = False
        return self
    """Auth module that defines a utility function."""
    pkg_auth.__initializing__ = True
    __cribo_init_result = _cribo_init___cribo_6d9930_pkg(pkg)
    for attr in dir(__cribo_init_result):
        if not attr.startswith('_'):
            setattr(pkg, attr, getattr(__cribo_init_result, attr))
    global pkg_utils
    pkg_auth.__initializing__ = True
    pkg_utils = _cribo_init___cribo_bdb497_pkg_utils(pkg_utils)
    utils = pkg.utils
    self.utils = utils

    def _basic_auth_str(username, password):
        """Returns a basic auth string."""
        formatted = utils.format_credentials(username, password)
        return f"Basic {formatted}"
    self._basic_auth_str = _basic_auth_str

    class HTTPBasicAuth:
        """Basic authentication class."""

        def __init__(self, username, password):
            self.username = username
            self.password = password

        def get_header(self):
            return _basic_auth_str(self.username, self.password)
    HTTPBasicAuth.__module__ = 'pkg.auth'
    self.HTTPBasicAuth = HTTPBasicAuth
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_auth.__init__ = _cribo_init___cribo_e94ab8_pkg_auth
pkg.auth = pkg_auth
def _cribo_init___cribo_6d9930_pkg(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        self.__initializing__ = False
        return self
    global pkg_adapters
    pkg.__initializing__ = True
    pkg_adapters = _cribo_init___cribo_12d613_pkg_adapters(pkg_adapters)
    adapters = pkg.adapters
    self.adapters = adapters
    global pkg_auth
    pkg.__initializing__ = True
    pkg_auth = _cribo_init___cribo_e94ab8_pkg_auth(pkg_auth)
    auth = pkg.auth
    self.auth = auth
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg.__init__ = _cribo_init___cribo_6d9930_pkg
"""Test fixture for circular import with function reference issue.\n\nThis reproduces the _basic_auth_str issue from requests where a function\ndefined in one module (auth) is imported by another module (adapters),\nbut due to circular dependencies, the function is not available when needed.\n"""
__cribo_init_result = _cribo_init___cribo_6d9930_pkg(pkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(pkg, attr, getattr(__cribo_init_result, attr))
adapter = pkg.adapters.Adapter()
adapter.use_auth("user", "pass")
print("SUCCESS: Function was properly available")
