---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_ast_rewriting_global/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import types
set_dynamic_global("dynamic2", [1, 2, 3])
def set_dynamic_global(name, value):
    """Set a global variable dynamically using globals()."""
    globals()[name] = value
def get_dynamic_global(name, default=None):
    """Get a global variable dynamically."""
    return globals().get(name, default)
set_dynamic_global("dynamic1", "created_via_globals")
baz = 42
module_globals_dict = types.SimpleNamespace()
module_globals_dict.set_dynamic_global = set_dynamic_global
module_globals_dict.get_dynamic_global = get_dynamic_global
module_globals_dict.baz = baz
def get_foo():
    """Get the module's global foo value."""
    return foo
foo_module_global_keyword = "module1_foo"
module_global_keyword = types.SimpleNamespace()
module_global_keyword.get_foo = get_foo
module_global_keyword.foo = foo_module_global_keyword
globals()["initialized_via_globals"] = True
counter = 0
foo_module_mixed_patterns = "module3_foo"
exec("exec_created_var = 'created_via_exec'", globals())
bar_module_mixed_patterns = "module3_bar"
module_mixed_patterns = types.SimpleNamespace()
module_mixed_patterns.counter = counter
module_mixed_patterns.foo = foo_module_mixed_patterns
module_mixed_patterns.bar = bar_module_mixed_patterns
"""Test global namespace isolation between modules."""
foo = "main_foo"
bar = "main_bar"
assert foo == "main_foo"
assert bar == "main_bar"
print("Module with global keyword:", module_global_keyword.get_foo())
print("Module with globals() dict:", module_globals_dict.get_bar())
print("Module with mixed patterns:", module_mixed_patterns.get_values())
module_global_keyword.modify_foo()
module_globals_dict.modify_bar()
module_mixed_patterns.modify_all()
print("\nAfter modifications:")
print("Module with global keyword:", module_global_keyword.get_foo())
print("Module with globals() dict:", module_globals_dict.get_bar())
print("Module with mixed patterns:", module_mixed_patterns.get_values())
assert foo == "main_foo"
assert bar == "main_bar"
print("\nMain's globals remain unchanged:")
print(f"foo = {foo}")
print(f"bar = {bar}")
