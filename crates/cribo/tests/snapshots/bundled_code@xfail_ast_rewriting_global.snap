---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_ast_rewriting_global/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

"""Test global namespace isolation between modules."""
"""Module demonstrating global keyword usage."""
"""Module demonstrating mixed global access patterns."""
"""Module demonstrating globals() dictionary access."""
foo = "main_foo"
foo_module_global_keyword = "module1_foo"
foo_module_mixed_patterns = "module3_foo"
bar_module_globals_dict = "module2_bar"
bar = "main_bar"
def get_foo():
    """Get the module's global foo value."""
    return foo
bar_module_mixed_patterns = "module3_bar"
baz = 42
def modify_foo():
    """Modify the module's global foo using global keyword."""
    global foo
    foo = "module1_foo_modified"
counter = 0
def get_bar():
    """Get bar using globals() dict."""
    return globals()["bar"]
def set_foo_with_global(value):
    """Set foo using global keyword."""
    global foo
    foo = value
def get_values():
    """Get module globals using different methods."""
    direct_foo = foo
    dict_bar = globals()["bar"]
    counter_val = globals().get("counter", -1)
    return {"foo": direct_foo, "bar": dict_bar, "counter": counter_val}
def modify_bar():
    """Modify bar using globals() dict."""
    globals()["bar"] = "module2_bar_modified"
def local_vs_global():
    """Demonstrate local vs global scope."""
    foo = "local_foo"

    def inner():
        global foo
        return foo
    return foo, inner()
def modify_all():
    """Modify globals using different patterns."""
    global foo, counter
    foo = "module3_foo_modified"
    counter += 1
    globals()["bar"] = "module3_bar_modified"
    globals()["new_var"] = "dynamically_added"
def set_dynamic_global(name, value):
    """Set a global variable dynamically using globals()."""
    globals()[name] = value
assert foo == "main_foo"
def local_vs_global():
    """Demonstrate local vs global scope."""
    foo = "local_foo"

    def inner():
        global foo
        return foo
    return foo, inner()
def complex_global_usage():
    """Demonstrate complex global usage patterns."""
    global counter
    original = counter
    for i in range(3):
        counter += 1

    def increment():
        global counter
        counter += 1
        return counter
    global_keys = [k for k in globals() if not k.startswith("_")]
    return {"original": original, "after_loop": counter, "increment_func": increment, "global_count": len(global_keys)}
def get_dynamic_global(name, default=None):
    """Get a global variable dynamically."""
    return globals().get(name, default)
assert bar == "main_bar"
def complex_global_usage():
    """Demonstrate complex global usage patterns."""
    global counter
    original = counter
    for i in range(3):
        counter += 1

    def increment():
        global counter
        counter += 1
        return counter
    global_keys = [k for k in globals() if not k.startswith("_")]
    return {"original": original, "after_loop": counter, "increment_func": increment, "global_count": len(global_keys)}
def list_module_globals():
    """List all non-built-in globals in this module."""
    return {k: v for k, v in globals().items() if not k.startswith("__") and k not in ["get_bar", "modify_bar", "set_dynamic_global", "get_dynamic_global", "list_module_globals"]}
print("Module with global keyword:", get_foo())
def complex_global_usage():
    """Demonstrate complex global usage patterns."""
    global counter
    original = counter
    for i in range(3):
        counter += 1

    def increment():
        global counter
        counter += 1
        return counter
    global_keys = [k for k in globals() if not k.startswith("_")]
    return {"original": original, "after_loop": counter, "increment_func": increment, "global_count": len(global_keys)}
set_dynamic_global("dynamic1", "created_via_globals")
print("Module with globals() dict:", get_bar())
globals()["initialized_via_globals"] = True
set_dynamic_global("dynamic2", [1, 2, 3])
print("Module with mixed patterns:", get_values())
exec("exec_created_var = 'created_via_exec'", globals())
modify_foo()
modify_bar()
modify_all()
print("\nAfter modifications:")
print("Module with global keyword:", get_foo())
print("Module with globals() dict:", get_bar())
print("Module with mixed patterns:", get_values())
assert foo == "main_foo"
assert bar == "main_bar"
print("\nMain's globals remain unchanged:")
print(f"foo = {foo}")
print(f"bar = {bar}")
