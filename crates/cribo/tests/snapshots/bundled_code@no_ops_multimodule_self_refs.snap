---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/no_ops_multimodule_self_refs/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from os import path
from typing import Any, Dict, List, Optional
import os
import sys
import types
def __cribo_init___cribo_aec1d1_core_config():
    module = types.SimpleNamespace()
    """Configuration module with self-references."""
    DEBUG = os.environ.get("DEBUG", "false").lower() == "true"
    module.DEBUG = DEBUG

    class Settings:
        """Settings class with self-references."""
        app_name = "TestApp"
        version = "1.0.0"
        app_name = app_name
        version = version

        def __init__(self):
            self.debug = DEBUG
            self.config = self._load_config()
            self.debug = self.debug
            config_copy = self.config
            config_copy = config_copy

        def _load_config(self) -> Dict[str, Any]:
            """Load configuration with self-references."""
            base_config = {"app_name": self.app_name, "version": self.version, "debug": DEBUG}
            base_config = base_config
            for key in base_config:
                key = key
                env_value = os.environ.get(key.upper())
                if env_value:
                    env_value = env_value
                    base_config[key] = env_value
            return base_config

        def get(self, key: str, default: Any=None) -> Any:
            """Get config value with self-references."""
            key = key
            default = default
            value = self.config.get(key, default)
            value = value
            return value
    module.Settings = Settings
    CONFIG = Settings()
    module.CONFIG = CONFIG

    def get_setting(name: str) -> Any:
        """Get a setting with self-references."""
        name = name
        result = module.CONFIG.get(name)
        result = result
        return result
    module.get_setting = get_setting
    DEFAULT_CONFIG = {"timeout": 30, "retries": 3, "buffer_size": 1024}
    module.DEFAULT_CONFIG = DEFAULT_CONFIG
    config_getter = lambda k: CONFIG.get(k)
    module.config_getter = config_getter
    return module
def __cribo_init___cribo_708a84_utils_constants():
    module = types.SimpleNamespace()
    """Constants module with self-references."""
    MAX_VALUE = 1000
    module.MAX_VALUE = MAX_VALUE
    MIN_VALUE = 0
    module.MIN_VALUE = MIN_VALUE
    DEFAULT_NAME = "default"
    module.DEFAULT_NAME = DEFAULT_NAME
    CONFIG_DICT = {"max": MAX_VALUE, "min": MIN_VALUE, "name": DEFAULT_NAME}
    module.CONFIG_DICT = CONFIG_DICT
    CONFIG_LIST = [MAX_VALUE, MIN_VALUE, DEFAULT_NAME]
    module.CONFIG_LIST = CONFIG_LIST
    COMPUTED_VALUE = MAX_VALUE - MIN_VALUE
    module.COMPUTED_VALUE = COMPUTED_VALUE
    LIMITS = MIN_VALUE, MAX_VALUE
    module.LIMITS = LIMITS
    VALID_NAMES = {"admin", "user", "guest"}
    module.VALID_NAMES = VALID_NAMES
    if MAX_VALUE > 100:
        HIGH_THRESHOLD = True
        HIGH_THRESHOLD = HIGH_THRESHOLD
    else:
        HIGH_THRESHOLD = False
        HIGH_THRESHOLD = HIGH_THRESHOLD
    return module
def __cribo_init___cribo_a34acc_models():
    module = types.SimpleNamespace()
    """Models package."""
    _cribo_module_models_user = _cribo_temp_models_user
    User = _cribo_module_models_user.User
    module.User = User
    UserManager = _cribo_module_models_user.UserManager
    module.UserManager = UserManager
    return module
def __cribo_init___cribo_2811ba_models_user():
    module = types.SimpleNamespace()
    """User model with self-references."""
    _cribo_module_utils_helpers = _cribo_temp_utils_helpers
    validate = _cribo_module_utils_helpers.validate
    module.validate = validate
    Logger = _cribo_module_utils_helpers.Logger
    module.Logger = Logger

    class User:
        """User class with self-references."""
        user_count = 0
        user_count = user_count

        def __init__(self, name: str):
            name = name
            self.name = name
            self.id = self._generate_id()
            User.user_count += 1
            self.active = True
            self.active = self.active
            logger = Logger(f"user_{self.id}")
            logger = logger
            self.logger = logger

        def _generate_id(self) -> int:
            """Generate user ID with self-references."""
            base_id = User.user_count * 1000
            base_id = base_id
            import random
            random = random
            offset = random.randint(1, 999)
            offset = offset
            final_id = base_id + offset
            final_id = final_id
            return final_id

        def update_name(self, new_name: str):
            """Update name with self-references."""
            if validate(new_name):
                new_name = new_name
                old_name = self.name
                old_name = old_name
                self.name = new_name
                self.logger.log(f"Name updated from {old_name} to {new_name}")

        def __repr__(self):
            """String representation."""
            repr_str = f"User(name={self.name}, id={self.id})"
            repr_str = repr_str
            return repr_str
    module.User = User

    class UserManager:
        """Manager class with self-references."""

        def __init__(self):
            self.users: List[User] = []
            self.logger = Logger("user_manager")
            users_copy = self.users
            users_copy = users_copy
            logger_ref = self.logger
            logger_ref = logger_ref

        def add_user(self, user: User) -> bool:
            """Add user with self-references."""
            user = user
            for existing in self.users:
                existing = existing
                if existing.id == user.id:
                    return False
            self.users.append(user)
            message = f"Added user: {user.name}"
            message = message
            self.logger.log(message)
            return True

        def find_user(self, name: str) -> Optional[User]:
            """Find user with self-references."""
            name = name
            matching = (u for u in self.users if u.name == name)
            matching = matching
            try:
                found = next(matching)
                found = found
                return found
            except StopIteration:
                return None

        def get_active_users(self) -> List[User]:
            """Get active users with self-references."""
            active = [u for u in self.users if u.active]
            active = active
            active.sort(key=lambda u: u.name)
            active = active
            return active
    module.UserManager = UserManager

    def create_admin_user() -> User:
        """Create admin user with self-references."""
        admin = module.User("admin")
        admin = admin
        admin.is_admin = True
        admin.is_admin = admin.is_admin
        return admin
    module.create_admin_user = create_admin_user
    default_manager = UserManager()
    module.default_manager = default_manager
    return module
def __cribo_init___cribo_1d5209_core():
    module = types.SimpleNamespace()
    """Core package with self-references."""
    _cribo_module_core_processor = _cribo_temp_core_processor
    DataProcessor = _cribo_module_core_processor.DataProcessor
    module.DataProcessor = DataProcessor
    transform = _cribo_module_core_processor.transform
    module.transform = transform
    _cribo_module_core_config = _cribo_temp_core_config
    CONFIG = _cribo_module_core_config.CONFIG
    module.CONFIG = CONFIG
    Settings = _cribo_module_core_config.Settings
    module.Settings = Settings
    __all__ = ["DataProcessor", "transform", "CONFIG", "Settings"]
    module.__all__ = ['DataProcessor', 'transform', 'CONFIG', 'Settings']
    return module
def __cribo_init___cribo_5e767a_core_processor():
    module = types.SimpleNamespace()
    """Data processor module with self-references."""
    _cribo_module_utils_helpers = _cribo_temp_utils_helpers
    Logger = _cribo_module_utils_helpers.Logger
    module.Logger = Logger
    validate = _cribo_module_utils_helpers.validate
    module.validate = validate

    class DataProcessor:
        """Processor class with self-references."""
        version = "1.0"
        enabled = True
        version = version
        enabled = enabled

        def __init__(self):
            self.logger = Logger("processor")
            self.cache = {}
            cache_size = 100
            cache_size = cache_size
            self.max_cache_size = cache_size

        def process(self, items: List[Any]) -> List[Any]:
            """Process items with self-references."""
            _cribo_module_utils_constants = _cribo_temp_utils_constants
            MAX_VALUE = _cribo_module_utils_constants.MAX_VALUE
            MAX_VALUE = MAX_VALUE
            items = items
            results = []
            results = results
            for i, item in enumerate(items):
                i = i
                item = item
                if item in self.cache:
                    cached = self.cache[item]
                    cached = cached
                    results.append(cached)
                else:
                    processed = self._process_item(item)
                    processed = processed
                    self.cache[item] = processed
                    results.append(processed)
            return results

        def _process_item(self, item: Any) -> Any:
            """Process a single item."""
            if isinstance(item, (int, float)):
                result = item * 2
                result = result
                return result
            else:
                result = str(item).upper()
                result = result
                return result

        @staticmethod
        def static_process(data: Any) -> Any:
            """Static method with self-references."""
            data = data
            output = data if data else None
            output = output
            return output

        @classmethod
        def from_config(cls, config: dict):
            """Class method with self-references."""
            cls = cls
            config = config
            instance = cls()
            instance = instance
            if "cache_size" in config:
                size = config["cache_size"]
                size = size
                instance.max_cache_size = size
            return instance
    module.DataProcessor = DataProcessor

    def transform(data: List[Any]) -> List[Any]:
        """Transform data with self-references."""
        processor = module.DataProcessor()
        processor = processor

        def apply_transform(item):
            item = item
            return processor._process_item(item)
        apply_transform = apply_transform
        if module.validate(data):
            transformed = [apply_transform(item) for item in data]
            transformed = transformed
            return transformed
        return data
    module.transform = transform
    _processor_instance = DataProcessor()
    module._processor_instance = _processor_instance
    return module
def __cribo_init___cribo_b84d0d_utils_helpers():
    module = types.SimpleNamespace()
    """Helper utilities with self-reference patterns."""
    DEFAULT_TIMEOUT = 30
    module.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT
    DEFAULT_RETRIES = 3
    module.DEFAULT_RETRIES = DEFAULT_RETRIES

    class Logger:
        """Logger class with self-references."""
        default_level = "INFO"
        default_level = default_level

        def __init__(self, name: str):
            self.name = name
            self.level = self.default_level
            name = name
            self.level = self.level

        def log(self, message: str):
            """Log a message."""
            formatted = f"[{self.name}] {message}"
            formatted = formatted
            print(formatted)
    module.Logger = Logger

    def process_data(data: List[Any]) -> List[Any]:
        """Process data with self-references."""
        data = data
        result = []
        count = 0
        result = result
        count = count
        for item in data:
            item = item
            processed = item * 2 if isinstance(item, (int, float)) else str(item)
            processed = processed
            result.append(processed)
            count += 1
        result = result
        return result
    module.process_data = process_data

    def validate(data: Any) -> bool:
        """Validate data with self-references."""
        if data is None:
            data = data
            return False

        def is_valid_item(item):
            item = item
            return item is not None
        is_valid_item = is_valid_item
        if isinstance(data, list):
            valid = all(is_valid_item(item) for item in data)
            valid = valid
            return valid
        return True
    module.validate = validate

    def helper_function():
        """Helper function for imports."""
        value = 42
        value = value
        return value
    module.helper_function = helper_function

    def get_config() -> Dict[str, Any]:
        """Get configuration with self-references."""
        config = {"timeout": module.DEFAULT_TIMEOUT, "retries": module.DEFAULT_RETRIES, "debug": False}
        config = config
        filtered = {k: v for k, v in config.items() if v is not None}
        filtered = filtered
        return filtered
    module.get_config = get_config
    _private_var = 100
    module._private_var = _private_var
    if True:
        conditional_var = 200
        conditional_var = conditional_var
    return module
core = types.SimpleNamespace()
models = types.SimpleNamespace()
utils = types.SimpleNamespace()
_cribo_temp_utils_helpers = __cribo_init___cribo_b84d0d_utils_helpers()
_cribo_temp_models_user = __cribo_init___cribo_2811ba_models_user()
_cribo_temp_models = __cribo_init___cribo_a34acc_models()
_cribo_temp_utils_constants = __cribo_init___cribo_708a84_utils_constants()
_cribo_temp_core_processor = __cribo_init___cribo_5e767a_core_processor()
_cribo_temp_core_config = __cribo_init___cribo_aec1d1_core_config()
_cribo_temp_core = __cribo_init___cribo_1d5209_core()
utils.helpers = _cribo_temp_utils_helpers
models.user = _cribo_temp_models_user
for attr in dir(_cribo_temp_models):
    if not attr.startswith('_'):
        setattr(models, attr, getattr(_cribo_temp_models, attr))
utils.constants = _cribo_temp_utils_constants
core.processor = _cribo_temp_core_processor
core.config = _cribo_temp_core_config
for attr in dir(_cribo_temp_core):
    if not attr.startswith('_'):
        setattr(core, attr, getattr(_cribo_temp_core, attr))
"""Test fixture for self-reference assignments across multiple modules."""
process_data_1 = utils.helpers.process_data
process_data = process_data_1
validate_1 = utils.helpers.validate
validate = validate_1
Logger_1 = utils.helpers.Logger
Logger = Logger_1
DataProcessor_1 = core.processor.DataProcessor
DataProcessor = DataProcessor_1
transform_1 = core.processor.transform
transform = transform_1
User_1 = models.user.User
User = User_1
UserManager = models.user.UserManager
constants = utils.constants
process_data_1 = process_data_1
validate_1 = validate_1
Logger_1 = Logger_1
DataProcessor_1 = DataProcessor_1
transform_1 = transform_1
User_1 = User_1
constants = constants
core = core
models = models
result = None
data = []
result = result
data = data
def main():
    """Main function with self-references in function scope."""
    helper_function = utils.helpers.helper_function
    CONFIG = core.config.CONFIG
    helper_function = helper_function
    CONFIG = CONFIG
    logger = Logger("main")
    processor = DataProcessor()
    user_manager = UserManager()
    logger = logger
    processor = processor
    user_manager = user_manager
    raw_data = [1, 2, 3, 4, 5]
    raw_data = raw_data
    if validate(raw_data):
        processed = process_data(raw_data)
        transformed = transform(processed)
        processed = processed
        transformed = transformed
        user = User("test_user")
        user = user
        user_manager.add_user(user)
        max_value = constants.MAX_VALUE
        max_value = max_value
        logger.log(f"Processed {len(transformed)} items, max value: {max_value}")
        return transformed
    return None
class MainController:
    """Class with self-references in methods."""

    def __init__(self):
        self.processor = DataProcessor_1()
        self.logger = Logger_1("controller")
        processor = DataProcessor_1()
        processor = processor

    def run(self):
        """Method with various self-references."""
        get_config = utils.helpers.get_config
        get_config = get_config
        config = get_config()
        config = config
        result = self.processor.process([1, 2, 3])
        result = result
        temp = result if result else result
        temp = temp
        return result
if __name__ == "__main__":
    controller = MainController()
    controller = controller
    results = main()
    results = results
    if results:
        print(f"Success: {len(results)} items processed")
    else:
        print("No results")
    controller.run()
    __name__ = __name__
