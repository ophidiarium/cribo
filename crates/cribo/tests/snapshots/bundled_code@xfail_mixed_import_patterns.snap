---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/xfail_mixed_import_patterns/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

"""\nUtility module with no dependencies on other modules in this package.\nThis can be safely imported at module level by everyone.\n"""
def format_message(message):
    """Format a message with decorative borders"""
    return f">>> {message} <<<"
def get_timestamp():
    """Get current timestamp for logging"""
    return "00:00:00"
"""\nSimulates a software architecture with:\n- A logger that needs configuration\n- A configuration system that logs its initialization\n- An application that uses both\n- Utilities that are used everywhere (no circular deps)\n"""
def main():
    print(format_message("=== Application Starting ==="))
    from config import Config
    config = Config()
    config.ensure_logger_configured()
    print(format_message(f"Configuration loaded: debug={config.debug_mode}"))
    from app import Application
    app = Application()
    app.run()
    print(format_message("=== Application Finished ==="))
if __name__ == "__main__":
    main()
