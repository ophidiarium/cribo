---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/symbol_usage_optimization/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
submodule_helpers = _cribo.types.SimpleNamespace(__name__='submodule.helpers')
submodule = _cribo.types.SimpleNamespace(__name__='submodule', __initializing__=False, __initialized__=False)
submodule.helpers = submodule_helpers
"""Helper functions module."""
def format_string(s: str) -> str:
    """Format a string."""
    return f"Formatted: {s}"
def unused_helper1(x: int) -> int:
    """Helper that shouldn't be initialized in process_data."""
    print("unused_helper1 was initialized - this is dead code!")
    return x * 2
def unused_helper2(y: float) -> float:
    """Another helper that shouldn't be initialized in process_data."""
    print("unused_helper2 was initialized - this is dead code!")
    return y * 3.14
submodule_helpers.format_string = format_string
"""Submodule that re-exports from helpers."""
def process_data(data: str) -> str:
    """Process data using only format_string, not the other helpers."""
    return format_string(data)
submodule.process_data = process_data
"""Test that unused imports in function bodies are not initialized."""
def main():
    result = process_data("test")
    print(result)
if __name__ == "__main__":
    main()
helpers = submodule.helpers
