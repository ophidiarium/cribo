---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_function_level_module_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
"""Calculator module with simple operations"""
description = "A simple calculator module"
def add(a, b):
    return a + b
def multiply(a, b):
    return a * b
def __cribo_init___cribo_25bc3d_utils():
    if '__cribo_25bc3d_utils' in sys.modules:
        return sys.modules['__cribo_25bc3d_utils']
    module = types.ModuleType('__cribo_25bc3d_utils')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_25bc3d_utils'] = module
    sys.modules['utils'] = module
    return module
__cribo_modules = {'utils': '__cribo_25bc3d_utils'}
__cribo_init_functions = {'__cribo_25bc3d_utils': __cribo_init___cribo_25bc3d_utils}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_25bc3d_utils()
utils = sys.modules['utils']
def process_data():
    from utils import calculator
    result = calculator.add(5, 3)
    print(f"Result: {result}")
    print(f"Calculator description: {calculator.description}")
if __name__ == "__main__":
    process_data()
