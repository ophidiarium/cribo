---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/all_variable_handling/main.py
---
import sys, types
def __cribo_init___cribo_ee784c_simple_module():
    if '__cribo_ee784c_simple_module' in sys.modules:
        return sys.modules['__cribo_ee784c_simple_module']
    module = types.ModuleType('__cribo_ee784c_simple_module')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/all_variable_handling/simple_module.py'
    sys.modules['__cribo_ee784c_simple_module'] = module
    sys.modules['simple_module'] = module
    __all__ = ["public_func", "CONSTANT"]

    def public_func():
        """A public function that should be exported."""
        return "Hello from public_func"
    module.public_func = public_func

    def _private_func():
        """A private function that should not be exported."""
        return "This is private"
    CONSTANT = 42
    module.CONSTANT = CONSTANT
    _PRIVATE_CONSTANT = "secret"

    class InternalClass:
        pass
    module.__all__ = ['public_func', 'CONSTANT']
    return module
def __cribo_init___cribo_62e3ba_nested_package_utils():
    if '__cribo_62e3ba_nested_package_utils' in sys.modules:
        return sys.modules['__cribo_62e3ba_nested_package_utils']
    module = types.ModuleType('__cribo_62e3ba_nested_package_utils')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/all_variable_handling/nested_package/utils.py'
    sys.modules['__cribo_62e3ba_nested_package_utils'] = module
    sys.modules['nested_package.utils'] = module

    def helper_func():
        """Helper function used by other modules"""
        return "helper result"
    module.helper_func = helper_func

    def another_helper():
        """Another helper function"""
        return "another helper"
    module.another_helper = another_helper
    UTILS_CONSTANT = "utils value"
    module.UTILS_CONSTANT = UTILS_CONSTANT
    return module
def __cribo_init___cribo_e9952d_nested_package_submodule():
    if '__cribo_e9952d_nested_package_submodule' in sys.modules:
        return sys.modules['__cribo_e9952d_nested_package_submodule']
    module = types.ModuleType('__cribo_e9952d_nested_package_submodule')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/all_variable_handling/nested_package/submodule.py'
    sys.modules['__cribo_e9952d_nested_package_submodule'] = module
    sys.modules['nested_package.submodule'] = module
    __all__ = ["sub_function", "SUB_CONSTANT"]

    def sub_function():
        """Function from submodule"""
        return "Hello from submodule"
    module.sub_function = sub_function

    def _private_sub_func():
        """Private function in submodule"""
        return "private submodule function"
    SUB_CONSTANT = "submodule_value"
    module.SUB_CONSTANT = SUB_CONSTANT
    message = "from submodule"
    module.__all__ = ['sub_function', 'SUB_CONSTANT']
    return module
def __cribo_init___cribo_2657f2_nested_package():
    if '__cribo_2657f2_nested_package' in sys.modules:
        return sys.modules['__cribo_2657f2_nested_package']
    module = types.ModuleType('__cribo_2657f2_nested_package')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/all_variable_handling/nested_package/__init__.py'
    sys.modules['__cribo_2657f2_nested_package'] = module
    sys.modules['nested_package'] = module
    sub_function = sys.modules['nested_package.submodule'].sub_function
    module.sub_function = sub_function
    helper_func = sys.modules['nested_package.utils'].helper_func
    __all__ = ["exported_from_init", "sub_function"]

    def exported_from_init():
        """Function exported from package __init__.py"""
        return f"From init, using helper: {helper_func()}"
    module.exported_from_init = exported_from_init

    def _internal_init_func():
        """Internal function not exported"""
        return "internal"
    PACKAGE_CONSTANT = "from_package"
    module.__all__ = ['exported_from_init', 'sub_function']
    return module
def __cribo_init___cribo_b4d2e2_conflict_module():
    if '__cribo_b4d2e2_conflict_module' in sys.modules:
        return sys.modules['__cribo_b4d2e2_conflict_module']
    module = types.ModuleType('__cribo_b4d2e2_conflict_module')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/all_variable_handling/conflict_module.py'
    sys.modules['__cribo_b4d2e2_conflict_module'] = module
    sys.modules['conflict_module'] = module
    __all__ = ["message", "SHARED_NAME"]
    message = "from conflict_module"
    module.message = message
    SHARED_NAME = "conflict_module_version"
    module.SHARED_NAME = SHARED_NAME

    def internal_func():
        """Internal function not in __all__"""
        return "internal"
    __all__backup = "this is not the real __all__"
    module.__all__ = ['message', 'SHARED_NAME']
    return module
__cribo_modules = {'simple_module': '__cribo_ee784c_simple_module', 'nested_package.utils': '__cribo_62e3ba_nested_package_utils', 'nested_package.submodule': '__cribo_e9952d_nested_package_submodule', 'nested_package': '__cribo_2657f2_nested_package', 'conflict_module': '__cribo_b4d2e2_conflict_module'}
__cribo_init_functions = {'__cribo_ee784c_simple_module': __cribo_init___cribo_ee784c_simple_module, '__cribo_62e3ba_nested_package_utils': __cribo_init___cribo_62e3ba_nested_package_utils, '__cribo_e9952d_nested_package_submodule': __cribo_init___cribo_e9952d_nested_package_submodule, '__cribo_2657f2_nested_package': __cribo_init___cribo_2657f2_nested_package, '__cribo_b4d2e2_conflict_module': __cribo_init___cribo_b4d2e2_conflict_module}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_ee784c_simple_module()
__cribo_init___cribo_62e3ba_nested_package_utils()
__cribo_init___cribo_e9952d_nested_package_submodule()
__cribo_init___cribo_2657f2_nested_package()
__cribo_init___cribo_b4d2e2_conflict_module()
public_func = sys.modules['simple_module'].public_func
CONSTANT = sys.modules['simple_module'].CONSTANT
exported_from_init = sys.modules['nested_package'].exported_from_init
sub_function = sys.modules['nested_package.submodule'].sub_function
message = sys.modules['conflict_module'].message
print("Testing simple module exports:")
print(f"public_func() = {public_func()}")
print(f"CONSTANT = {CONSTANT}")
print("\nTesting nested package exports:")
print(f"exported_from_init() = {exported_from_init()}")
print(f"sub_function() = {sub_function()}")
print("\nTesting conflict resolution:")
print(f"message = {message}")
simple_module = sys.modules['simple_module']
print(f"\nsimple_module.__all__ = {simple_module.__all__}")
sub = sys.modules['nested_package.submodule']
print(f"submodule.__all__ = {sub.__all__}")
