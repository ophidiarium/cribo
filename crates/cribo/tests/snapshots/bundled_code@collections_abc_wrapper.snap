---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/collections_abc_wrapper/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from collections.abc import Mapping, MutableMapping
import collections.abc as _cribo_collections_abc
import functools as _cribo_functools
import types as _cribo_types
_cribo = _cribo_types.SimpleNamespace(__name__='_cribo', functools=_cribo_functools, types=_cribo_types)
if not hasattr(_cribo, 'collections'):
    setattr(_cribo, 'collections', _cribo_types.SimpleNamespace())
setattr(_cribo.collections, 'abc', _cribo_collections_abc)
@_cribo.functools.cache
def _cribo_init___cribo_f0aa89_compat():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'compat'
    """compat.py - Compatibility module with side effects."""
    print("Loading compat module...")
    _cribo_module.MutableMapping = MutableMapping
    return _cribo_module
compat = _cribo_init___cribo_f0aa89_compat()
class CaseInsensitiveDict(compat.MutableMapping):
    """A case-insensitive dict-like object."""

    def __init__(self):
        self._store = {}

    def __setitem__(self, key, value):
        self._store[key.lower()] = value

    def __getitem__(self, key):
        return self._store[key.lower()]

    def __delitem__(self, key):
        del self._store[key.lower()]

    def __iter__(self):
        return iter(self._store)

    def __len__(self):
        return len(self._store)
CaseInsensitiveDict.__module__ = 'structures'
"""structures.py - Contains data structures."""
"""Test case for collections.abc imports in wrapper modules."""
d = CaseInsensitiveDict()
d["Accept"] = "application/json"
print(f"Accept header: {d['accept']}")
print("Success!")
