---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/pyfail_three_module_cycle/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
def __cribo_init___cribo_ae45fc_module_a():
    if '__cribo_ae45fc_module_a' in sys.modules:
        return sys.modules['__cribo_ae45fc_module_a']
    module = types.ModuleType('__cribo_ae45fc_module_a')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_ae45fc_module_a'] = module
    sys.modules['module_a'] = module

    def process_a():
        from module_b import process_b
        """Process A that depends on B"""
        return process_b() + "->A"
    module.process_a = process_a

    def get_value_a():
        return "value_from_A"
    module.get_value_a = get_value_a
    return module
def __cribo_init___cribo_afa23a_module_b():
    if '__cribo_afa23a_module_b' in sys.modules:
        return sys.modules['__cribo_afa23a_module_b']
    module = types.ModuleType('__cribo_afa23a_module_b')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_afa23a_module_b'] = module
    sys.modules['module_b'] = module

    def process_b():
        from module_c import process_c
        """Process B that depends on C"""
        return process_c() + "->B"
    module.process_b = process_b

    def get_value_b():
        return "value_from_B"
    module.get_value_b = get_value_b
    return module
def __cribo_init___cribo_b6d812_module_c():
    if '__cribo_b6d812_module_c' in sys.modules:
        return sys.modules['__cribo_b6d812_module_c']
    module = types.ModuleType('__cribo_b6d812_module_c')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_b6d812_module_c'] = module
    sys.modules['module_c'] = module

    def process_c():
        from module_a import get_value_a
        """Process C that depends back on A - creates the cycle"""
        value = get_value_a()
        return f"C(using_{value})"
    module.process_c = process_c

    def get_value_c():
        return "value_from_C"
    module.get_value_c = get_value_c
    return module
__cribo_modules = {'module_a': '__cribo_ae45fc_module_a', 'module_b': '__cribo_afa23a_module_b', 'module_c': '__cribo_b6d812_module_c'}
__cribo_init_functions = {'__cribo_ae45fc_module_a': __cribo_init___cribo_ae45fc_module_a, '__cribo_afa23a_module_b': __cribo_init___cribo_afa23a_module_b, '__cribo_b6d812_module_c': __cribo_init___cribo_b6d812_module_c}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_ae45fc_module_a()
__cribo_init___cribo_afa23a_module_b()
__cribo_init___cribo_b6d812_module_c()
module_a = sys.modules['module_a']
def main():
    result = module_a.process_a()
    print(f"Result: {result}")
if __name__ == "__main__":
    main()
