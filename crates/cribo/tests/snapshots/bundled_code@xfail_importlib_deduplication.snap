---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_importlib_deduplication/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import importlib
import sys
import types
def __cribo_init___cribo_a58492_package_submodule():
    module = types.SimpleNamespace()
    print("package/submodule.py is being executed!")
    sub_counter = 10
    module.sub_counter = sub_counter
    return module
def __cribo_init___cribo_f17c5c_package():
    module = types.SimpleNamespace()
    print("package/__init__.py is being executed!")
    return module
def __cribo_init___cribo_1e7a8b_mymodule():
    module = types.SimpleNamespace()
    print("mymodule.py is being executed!")
    counter = 1
    module.counter = counter
    test_value = "Original"
    module.test_value = test_value
    return module
package = types.SimpleNamespace()
package.__name__ = 'package'
_cribo_temp_mymodule = __cribo_init___cribo_1e7a8b_mymodule()
_cribo_temp_package_submodule = __cribo_init___cribo_a58492_package_submodule()
_cribo_temp_package = __cribo_init___cribo_f17c5c_package()
mymodule = _cribo_temp_mymodule
package.submodule = _cribo_temp_package_submodule
for attr in dir(_cribo_temp_package):
    if not attr.startswith('_'):
        setattr(package, attr, getattr(_cribo_temp_package, attr))
"""Test how importlib.import_module handles sys.modules and deduplication"""
print("=== Testing importlib.import_module deduplication ===\n")
print(f"1. Normal import - mymodule id: {id(mymodule)}")
print(f"   sys.modules['mymodule'] id: {id(sys.modules['mymodule'])}")
mymodule2 = importlib.import_module('mymodule')
print(f"\n2. importlib import - mymodule2 id: {id(mymodule2)}")
print(f"   Are they the same object? {mymodule is mymodule2}")
_cribo_module_package = _cribo_temp_package
submodule = _cribo_module_package.submodule
print(f"\n3. Normal submodule import - submodule id: {id(submodule)}")
print(f"   sys.modules['package.submodule'] id: {id(sys.modules['package.submodule'])}")
submodule2 = importlib.import_module('package.submodule')
print(f"\n4. importlib full path - submodule2 id: {id(submodule2)}")
print(f"   Are they the same object? {submodule is submodule2}")
submodule3 = importlib.import_module('.submodule', 'package')
print(f"\n5. importlib relative - submodule3 id: {id(submodule3)}")
print(f"   Are they the same object? {submodule is submodule3}")
print("\n=== sys.modules entries ===")
for key in sorted(sys.modules.keys()):
    if key.startswith(('mymodule', 'package')):
        print(f"  {key}: {sys.modules[key]}")
print("\n=== Testing modification propagation ===")
mymodule.test_value = "Modified!"
print(f"Set mymodule.test_value = 'Modified!'")
print(f"mymodule2.test_value = {mymodule2.test_value}")
print(f"sys.modules['mymodule'].test_value = {sys.modules['mymodule'].test_value}")
print("\n=== Testing sys.modules deletion and reimport ===")
print(f"Original mymodule.counter = {mymodule.counter}")
del sys.modules['mymodule']
mymodule_new = importlib.import_module('mymodule')
print(f"After reimport mymodule_new.counter = {mymodule_new.counter}")
print(f"Are they the same object? {mymodule is mymodule_new}")
print(f"Original mymodule still has counter = {mymodule.counter}")
