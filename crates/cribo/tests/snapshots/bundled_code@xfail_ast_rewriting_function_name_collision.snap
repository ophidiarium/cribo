---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_ast_rewriting_function_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

"""\nFunction name collision test.\nBoth modules define a function with the same name.\n"""
def main():
    result_a = process_a("input from A")
    result_b = process_b("input from B")
    print(f"Module A result: {result_a}")
    print(f"Module B result: {result_b}")
    return {"module_a": result_a, "module_b": result_b}
from module_a import process_data as process_a
if __name__ == "__main__":
    result = main()
    print("Result:", result)
if __name__ == "__main__":
    result = main()
    print("Result:", result)
if __name__ == "__main__":
    result = main()
    print("Result:", result)
from module_b import process_data as process_b
"""\nModule B with a process_data function.\nThis will conflict with module_a.process_data when bundled.\n"""
MODULE_NAME = "module_b"
def process_data(input_data: str) -> str:
    """Process data in module B's way."""
    return f"Module B processed: {input_data.lower()}"
def another_helper() -> str:
    """A helper function unique to module B."""
    return "Module B helper"
"""\nModule A with a process_data function.\nThis will conflict with module_b.process_data when bundled.\n"""
MODULE_NAME = "module_a"
def process_data(input_data: str) -> str:
    """Process data in module A's way."""
    return f"Module A processed: {input_data.upper()}"
def helper_function() -> str:
    """A helper function unique to module A."""
    return "Module A helper"
