---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/alias_transformation_test/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import hashlib
import json
import math
import os
import sys
"""\nHelper utilities module.\nUsed to test mixed from-import scenarios (some aliased, some not).\n"""
def helper_func(input_str):
    """A helper function that processes a string."""
    return f"Processed: {input_str.upper()}"
def debug_print(message):
    """Debug printing function (will be imported with alias)."""
    print(f"[DEBUG] {message}")
def another_helper():
    """Another helper function (not imported)."""
    return "Another helper result"
"""\nConfiguration management utilities.\nUsed to test from-import alias transformations.\n"""
def load_config(config_file):
    """Load configuration from a file (simulated)."""
    return {"file": config_file, "loaded": True, "settings": {"debug": False}}
def save_config(config_data, config_file):
    """Save configuration to a file (simulated)."""
    return f"Config saved to {config_file}"
"""\nData processing utilities module.\nUsed to test from-import alias transformations.\n"""
def process_data(data_list):
    """Process a list of data by doubling each element."""
    return [x * 2 for x in data_list]
def format_output(processed_data):
    """Format processed data as a comma-separated string."""
    return ", ".join(map(str, processed_data))
def unaliased_function():
    """This function is not imported with an alias."""
    return "Not imported with alias"
"""\nTest case for alias transformation functionality.\n\nThis script demonstrates the issue where import aliases are not being transformed properly.\nWithout the transformer logic, the bundled output will contain both:\n1. Alias assignments (generated by generate_alias_assignments)\n2. Original import statements (that should be removed/transformed)\n\nThis creates redundant code and potentially confusing output.\n"""
process_a = process_data
format_a = format_output
config_a = load_config
debug_a = debug_print
def main():
    """Main function that uses the imported modules with their aliases."""
    data = json.dumps({"test": "data"})
    print(f"JSON data: {data}")
    dir_hash = hashlib.md5(b"test_directory").hexdigest()[:8]
    print(f"Current directory: /test/deterministic/{dir_hash}")
    env_var = os.environ.get("CRIBO_TEST", "default_value")
    print(f"CRIBO_TEST environment: {env_var}")
    python_version_info = sys.version_info
    print(f"Python version: {python_version_info.major}.{python_version_info.minor}")
    processed = process_a([1, 2, 3, 4, 5])
    formatted = format_a(processed)
    print(f"Processed and formatted: {formatted}")
    config = config_a("settings.json")
    print(f"Loaded config: {config}")
    result = math.sqrt(16)
    deterministic_num = int(hashlib.md5(b"alias_transformation_test").hexdigest()[:2], 16)
    print(f"Math result: {result}, Deterministic: {deterministic_num}")
    helper_result = helper_func("test")
    debug_a(f"Helper result: {helper_result}")
if __name__ == "__main__":
    main()
