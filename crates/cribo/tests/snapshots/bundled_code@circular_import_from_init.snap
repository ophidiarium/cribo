---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/circular_import_from_init/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
rich_console = _cribo.types.SimpleNamespace(__name__='rich.console')
rich = _cribo.types.SimpleNamespace(__name__='rich', __initializing__=False, __initialized__=False, __path__=[])
rich.console = rich_console
rich_jupyter = _cribo.types.SimpleNamespace(__name__='rich.jupyter', __initializing__=False, __initialized__=False)
rich.jupyter = rich_jupyter
def _cribo_init___cribo_d50b51_rich(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global rich_jupyter

    def get_console():
        return "console"
    self.get_console = get_console
    rich_jupyter = _cribo_init___cribo_951ad9_rich_jupyter(rich_jupyter)
    jupyter = rich.jupyter
    self.jupyter = jupyter
    self.console = rich_console
    self.__initialized__ = True
    self.__initializing__ = False
    return self
rich.__init__ = _cribo_init___cribo_d50b51_rich
def _cribo_init___cribo_951ad9_rich_jupyter(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    console = rich.console
    self.console = console
    self.__initialized__ = True
    self.__initializing__ = False
    return self
rich_jupyter.__init__ = _cribo_init___cribo_951ad9_rich_jupyter
__cribo_init_result = _cribo_init___cribo_d50b51_rich(rich)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(rich, attr, getattr(__cribo_init_result, attr))
print(rich.get_console())
jupyter = rich.jupyter
console = rich.console
