---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_renamed_forward_ref/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

class MyMetaclass_1(type):
    """Another metaclass with the same name."""

    def __init__(cls, name, bases, kwds):
        super(MyMetaclass_1, cls).__init__(name, bases, kwds)
        cls.other_attr = "from other"
class MyObject_1(metaclass=MyMetaclass_1):
    """Another class with the same name."""

    def __repr__(self):
        return f"OtherMyObject(other_attr={self.other_attr})"
class MyMetaclass_2(type):
    """A metaclass that adds attributes."""

    def __init__(cls, name, bases, kwds):
        super(MyMetaclass_2, cls).__init__(name, bases, kwds)
        cls.base_attr = "from base"
class MyObject_2(metaclass=MyMetaclass_2):
    """A class using the metaclass."""

    def __repr__(self):
        return f"MyObject(base_attr={self.base_attr})"
MyMetaclass_1.__module__ = 'other'
MyMetaclass_1.__name__ = 'MyMetaclass'
MyMetaclass_1.__qualname__ = 'MyMetaclass'
MyObject_1.__module__ = 'other'
MyObject_1.__name__ = 'MyObject'
MyObject_1.__qualname__ = 'MyObject'
"""Another module with similar class names to trigger renaming."""
MyMetaclass_2.__module__ = 'base'
MyMetaclass_2.__name__ = 'MyMetaclass'
MyMetaclass_2.__qualname__ = 'MyMetaclass'
MyObject_2.__module__ = 'base'
MyObject_2.__name__ = 'MyObject'
MyObject_2.__qualname__ = 'MyObject'
"""Base module with metaclass definitions."""
"""\nTest fixture for metaclass forward reference with renaming issue.\n\nThis reproduces the bug where class renaming causes forward references\nto metaclasses, similar to what happens with PyYAML.\n"""
MyMetaclass = MyMetaclass_2
MyObject = MyObject_2
OtherMeta = MyMetaclass_1
OtherObject = MyObject_1
obj1 = MyObject()
print(f"Object 1 created: {obj1}")
obj2 = OtherObject()
print(f"Object 2 created: {obj2}")
print("Test passed!")
