---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/ast_rewriting_regular_import_aliases/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

# Preserved imports
import math
import random


# Imports for alias assignments
import collections.abc
import json
import os
import sys
import urllib.parse
import xml.etree.ElementTree
# ─ Module: utils.config ─
import types
utils = types.ModuleType('utils')
utils.config = types.ModuleType('utils.config')
exec('"""Configuration module for testing regular import aliases."""\nDEFAULT_CONFIG = {"debug": True, "timeout": 30}\ndef get_config():\n    """Get the default configuration."""\n    return DEFAULT_CONFIG.copy()', utils.config.__dict__)

# ─ Module: utils.helpers ─
import types
utils.helpers = types.ModuleType('utils.helpers')
exec('"""Utility module for testing regular import aliases."""\ndef helper_function():\n    """A simple helper function."""\n    return "helper_result"\nclass UtilityClass:\n    """A simple utility class."""\n\n    def __init__(self, value):\n        self.value = value\n\n    def get_value(self):\n        return self.value', globals(), utils.helpers.__dict__)

# ─ Entry Module: main ─
operating_system = os
j = json
system_module = sys
abc_collections = collections.abc
url_parser = urllib.parse
xml_tree = xml.etree.ElementTree
helper_utils = utils.helpers
config_module = utils.config
'''\nTest fixture for regular import statements with aliases (non-"from" imports).\nThis exercises the code path in ast_rewriter.rs around lines 216-228.\n'''
import math
import random
def main():
    """Test function that uses the imported modules with aliases."""
    print("Current working directory: /test/working/directory")
    data = {"test": "value"}
    json_str = j.dumps(data)
    print("JSON string:", json_str)
    print("Python version: sys.version_info(major=3, minor=13, micro=3, releaselevel='final', serial=0)")
    print("ABC module available:", hasattr(abc_collections, "ABC"))
    parsed_url = url_parser.urlparse("https://example.com/path")
    print("Parsed URL:", parsed_url.netloc)
    root = xml_tree.Element("root")
    xml_tree.SubElement(root, "child")
    print("XML element tag:", root.tag)
    result = helper_utils.helper_function()
    print("Helper result:", result)
    util_obj = helper_utils.UtilityClass("test_value")
    print("Utility value:", util_obj.get_value())
    config = config_module.get_config()
    print("Config debug:", config["debug"])
    print("Pi value:", math.pi)
    random.seed(42)
    print("Random number:", random.randint(1, 100))
    return "regular_import_aliases_test_complete"
if __name__ == "__main__":
    result = main()
    print(result)
