---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/xfail_stickytape_explicit_relative_import_from_parent_package/main.py
---
import sys, types
def __cribo_init___cribo_aa6ad4_greetings_greeting():
    if '__cribo_aa6ad4_greetings_greeting' in sys.modules:
        return sys.modules['__cribo_aa6ad4_greetings_greeting']
    module = types.ModuleType('__cribo_aa6ad4_greetings_greeting')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/xfail_stickytape_explicit_relative_import_from_parent_package/greetings/greeting/__init__.py'
    sys.modules['__cribo_aa6ad4_greetings_greeting'] = module
    sys.modules['greetings.greeting'] = module
    module.message = message
    __all__ = ["message"]
    module.__all__ = ['message']
    return module
__cribo_modules = {'greetings.greeting': '__cribo_aa6ad4_greetings_greeting'}
__cribo_init_functions = {'__cribo_aa6ad4_greetings_greeting': __cribo_init___cribo_aa6ad4_greetings_greeting}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_aa6ad4_greetings_greeting()
message = "Hello"
greetings.greeting = sys.modules['greetings.greeting']
print(greetings.greeting.message)
