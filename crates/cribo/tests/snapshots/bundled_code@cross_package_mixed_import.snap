---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/cross_package_mixed_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
def process_user(name: str) -> str:
    """Process a user-related string.\n\n    This function is imported by core.database.connection,\n    demonstrating a cross-package absolute import.\n    """
    return f"user_{name}_processed"
"""User model providing cross-package functionality."""
class BaseModel:
    """Base model class."""

    def __init__(self, name: str):
        if not name or name.startswith("_"):
            raise ValueError(f"Invalid model name: {name}")
        self.name = name
        self.version = "1.0.0"

    def get_info(self):
        """Get model information."""
        return {"name": self.name, "type": "base", "model_version": self.version}
BaseModel.__module__ = 'models.base'
"""Base model module."""
_module_config = None
def set_config_reference(config):
    """Set the configuration reference - called by parent package."""
    global _module_config
    _module_config = config
def get_config():
    """Get the current configuration."""
    if _module_config is None:
        return {"debug": False}
    return _module_config.copy()
def is_debug():
    """Check if debug mode is enabled."""
    if _module_config is None:
        return False
    return _module_config.get("debug", False)
"""Configuration utilities for the core package."""
CORE_MODEL_VERSION = "1.0.0"
"""Version module separate from __init__ to avoid circular imports."""
def validate(value: str) -> bool:
    """Validate a string value.\n\n    This function is imported by core.database.connection using\n    a relative import (..utils.helpers), demonstrating relative\n    imports within the same package hierarchy.\n    """
    return bool(value and not value.startswith("_"))
"""Helper utilities for the core package."""
_cribo_models__base_model = None
_cribo_core__initialized = None
_cribo_core__config = None
def __cribo_init___cribo_563ea2_models():
    module = types.SimpleNamespace()
    """Models package with conditional imports and circular dependency handling."""
    _VERSION = "1.0.0"
    module._VERSION = _VERSION

    def get_model_version():
        """Get the models package version."""
        return module._VERSION
    module.get_model_version = get_model_version
    if sys.version_info >= (3, 9):
        from typing import TypeAlias
        ModelID: TypeAlias = str
    else:
        ModelID = str
    _base_model = None

    def get_base_model():
        """Lazy import of BaseModel to avoid circular imports."""
        global _cribo_models__base_model
        if _cribo_models__base_model is None:
            _cribo_models__base_model = BaseModel
        return _cribo_models__base_model
    module.get_base_model = get_base_model
    DEFAULT_MODEL_CONFIG = {"version": _VERSION, "features": ["user_processing", "lazy_loading"]}
    module.DEFAULT_MODEL_CONFIG = DEFAULT_MODEL_CONFIG
    try:
        from models.advanced import AdvancedModel
        HAS_ADVANCED = True
        DEFAULT_MODEL_CONFIG["features"].append("advanced_model")
    except ImportError:
        HAS_ADVANCED = False
        AdvancedModel = None
    module.HAS_ADVANCED = HAS_ADVANCED
    module.HAS_ADVANCED = HAS_ADVANCED
    __all__ = ["get_model_version", "process_user", "get_base_model", "ModelID", "DEFAULT_MODEL_CONFIG", "HAS_ADVANCED"]
    if HAS_ADVANCED:
        __all__.append("AdvancedModel")
    global _cribo_models__base_model
    _cribo_models__base_model = _base_model
    user = types.SimpleNamespace()
    user.process_user = process_user
    base = types.SimpleNamespace()
    base.BaseModel = BaseModel
    module.__all__ = ['get_model_version', 'process_user', 'get_base_model', 'ModelID', 'DEFAULT_MODEL_CONFIG', 'HAS_ADVANCED']
    module.process_user = process_user
    return module
def __cribo_init___cribo_1f0c3d_core_database_connection():
    module = types.SimpleNamespace()
    helper_validate = validate
    get_full_config = get_config
    """Database connection module demonstrating mixed import patterns.\n\nThis module combines:\n1. Absolute import from a different package (models.user)\n2. Relative import from within the same package (..utils.helpers)\n3. Import from parent package's version module (not __init__.py)\n4. No imports from parent package's __init__.py to avoid circular dependencies\n"""
    _cribo_module_models = models
    DEFAULT_MODEL_CONFIG = _cribo_module_models.DEFAULT_MODEL_CONFIG
    module.DEFAULT_MODEL_CONFIG = DEFAULT_MODEL_CONFIG
    get_base_model = _cribo_module_models.get_base_model
    module.get_base_model = get_base_model
    _connection_types = ["standard", "pooled", "async"]
    module._connection_types = _connection_types
    CONNECTION_METADATA = {"supported_types": _connection_types, "validator": helper_validate.__name__, "processor": process_user.__name__, "core_version": CORE_MODEL_VERSION, "model_config": DEFAULT_MODEL_CONFIG}
    module.CONNECTION_METADATA = CONNECTION_METADATA

    class Connection:
        """Connection class using mixed imports."""

        def __init__(self, database_name: str):
            if not helper_validate(database_name) or any(char in database_name for char in ["/", "\\", ":"]):
                raise ValueError(f"Invalid database name: {database_name}")
            self.name = process_user(database_name)
            self.metadata = CONNECTION_METADATA.copy()
            if database_name.startswith("model_"):
                BaseModel = get_base_model()
                self.model = BaseModel(database_name)
                self.metadata["model_info"] = self.model.get_info()

        def __str__(self):
            return f"Connection to {self.name}"
    module.Connection = Connection

    def connect(database_name: str) -> Connection:
        """Create a new database connection."""
        return Connection(database_name)
    module.connect = connect

    def get_connection_info() -> dict:
        """Get general connection information."""
        info = {"metadata": module.CONNECTION_METADATA, "debug_mode": is_debug(), "available_validators": ["validate_db_name", helper_validate.__name__]}
        if is_debug():
            info["config"] = get_full_config()
        return info
    module.get_connection_info = get_connection_info
    return module
def __cribo_init___cribo_782908_core_database():
    module = types.SimpleNamespace()
    """Database subpackage with import-time initialization and re-exports."""
    _registered_types = []
    module._registered_types = _registered_types

    def _register_type(type_name):
        """Internal function to register database types."""
        module._registered_types.append(type_name)
        return type_name
    _register_type("connection")
    _register_type("cursor")

    def validate_db_name(name: str) -> bool:
        """Validate database name with additional rules."""
        if not validate(name):
            return False
        return not any(char in name for char in ["/", "\\", ":"])
    module.validate_db_name = validate_db_name
    _cribo_module_core_database_connection = core.database.connection
    connect = _cribo_module_core_database_connection.connect
    module.connect = connect
    get_connection_info = _cribo_module_core_database_connection.get_connection_info
    module.get_connection_info = get_connection_info

    def safe_connect(database_name: str) -> str:
        """Connect only if core is initialized."""
        _cribo_module_core = core
        is_initialized = _cribo_module_core.is_initialized
        if not is_initialized():
            raise RuntimeError("Core package must be initialized before connecting")
        return connect(database_name)
    module.safe_connect = safe_connect
    __all__ = ["connect", "get_connection_info", "safe_connect", "validate_db_name", "_registered_types"]
    module.__all__ = ['connect', 'get_connection_info', 'safe_connect', 'validate_db_name', '_registered_types']
    return module
def __cribo_init___cribo_f00e4b_core():
    module = types.SimpleNamespace()
    """Core package with initialization logic and cross-package imports."""
    _initialized = False
    module._initialized = _initialized
    _config = {"debug": False}
    set_config_reference(_config)

    def initialize_core(debug=False):
        """Initialize the core package with configuration."""
        global _cribo_core__initialized, _cribo_core__config
        _cribo_core__initialized = True
        module._initialized = _cribo_core__initialized
        _cribo_core__config["debug"] = debug
        if debug:
            print(f"Core initialized with version: {CORE_MODEL_VERSION}")
        return _cribo_core__initialized
    module.initialize_core = initialize_core

    def is_initialized():
        """Check if core is initialized."""
        return module._initialized
    module.is_initialized = is_initialized
    __all__ = ["initialize_core", "is_initialized", "validate", "get_config", "CORE_MODEL_VERSION"]
    global _cribo_core__initialized
    _cribo_core__initialized = _initialized
    global _cribo_core__config
    _cribo_core__config = _config
    version = types.SimpleNamespace()
    version.CORE_MODEL_VERSION = CORE_MODEL_VERSION
    utils = types.SimpleNamespace()
    module.__all__ = ['initialize_core', 'is_initialized', 'validate', 'get_config', 'CORE_MODEL_VERSION']
    module.CORE_MODEL_VERSION = CORE_MODEL_VERSION
    module.validate = validate
    module.get_config = get_config
    return module
core = types.SimpleNamespace()
core.__name__ = 'core'
core.database = types.SimpleNamespace()
core.utils = types.SimpleNamespace()
models = types.SimpleNamespace()
models.__name__ = 'models'
models = __cribo_init___cribo_563ea2_models()
core.database.connection = __cribo_init___cribo_1f0c3d_core_database_connection()
__cribo_init_result = __cribo_init___cribo_782908_core_database()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(core.database, attr, getattr(__cribo_init_result, attr))
__cribo_init_result = __cribo_init___cribo_f00e4b_core()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(core, attr, getattr(__cribo_init_result, attr))
"""Test fixture demonstrating cross-package mixed import patterns.\n\nThis tests the specific pattern where a module uses both:\n1. Deep absolute imports crossing package boundaries (e.g., from models.user)\n2. Relative imports within its package (e.g., from ..utils.helpers)\n3. Import order dependencies with __init__.py files\n"""
_cribo_module_core = core
initialize_core = _cribo_module_core.initialize_core
db_connect = core.database.connect
connect = core.database.connection.connect
get_connection_info = core.database.connection.get_connection_info
CONNECTION_METADATA = core.database.connection.CONNECTION_METADATA
_cribo_module_models = models
get_model_version = _cribo_module_models.get_model_version
DEFAULT_MODEL_CONFIG = _cribo_module_models.DEFAULT_MODEL_CONFIG
HAS_ADVANCED = _cribo_module_models.HAS_ADVANCED
validate = _cribo_module_core.validate
get_config = _cribo_module_core.get_config
def demonstrate_import_patterns():
    """Demonstrate various import pattern behaviors."""
    print("=== Import Pattern Demonstration ===")
    print(f"\n1. Import-time values:")
    print(f"   - Model version from models package: {get_model_version()}")
    print(f"   - Core model version: {CONNECTION_METADATA['core_version']}")
    print(f"   - Model config features: {DEFAULT_MODEL_CONFIG['features']}")
    print(f"   - Has advanced model: {HAS_ADVANCED}")
    print(f"\n2. Pre-initialization state:")
    print(f"   - Config before init: {get_config()}")
    initialize_core(debug=True)
    print(f"\n3. Post-initialization state:")
    print(f"   - Config after init: {get_config()}")
    print(f"\n4. Testing connections:")
    conn1 = connect("test_db")
    print(f"   - Direct import: {conn1}")
    conn2 = db_connect("prod_db")
    print(f"   - Package-level import: {conn2}")
    conn3 = connect("model_user_db")
    print(f"   - With lazy import: {conn3}")
    info = get_connection_info()
    print(f"\n5. Connection info shows all imports:")
    print(f"   - Debug mode: {info['debug_mode']}")
    print(f"   - Available validators: {info['available_validators']}")
    print(f"   - Metadata processor: {info['metadata']['processor']}")
    print(f"   - Config included: {'config' in info}")
    return info
def main():
    """Main entry point."""
    results = demonstrate_import_patterns()
    print(f"\n6. Package-level re-exports:")
    print(f"   - validate('test'): {validate('test')}")
    print(f"   - validate('_hidden'): {validate('_hidden')}")
    return results
if __name__ == "__main__":
    result = main()
    print(f"\n=== Final Result ===")
    print(f"Successfully demonstrated cross-package mixed import patterns")
