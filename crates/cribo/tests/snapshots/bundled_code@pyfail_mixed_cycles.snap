---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_mixed_cycles/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

"""Test case with mixed resolvable and unresolvable circular dependencies."""
def main():
    print(f"Base value: {BASE_VALUE}")
    result = process_data(10)
    print(f"Processed: {result}")
from constants_module import BASE_VALUE
if __name__ == "__main__":
    main()
if __name__ == "__main__":
    main()
from function_module import process_data
"""Module with constants that has unresolvable circular dependency."""
def get_base_value():
    """Function-level access is fine."""
    return BASE_VALUE
from config_constants import CONFIG_MULTIPLIER
BASE_VALUE = 42 * CONFIG_MULTIPLIER
"""Module with resolvable function-level circular dependency."""
def utility_function():
    """Another function that doesn't create a cycle."""
    return "utility"
def process_data(value):
    """Process data using helper from another module."""
    from helper_module import transform
    return transform(value) * 2
def process_data(value):
    """Process data using helper from another module."""
    from helper_module import transform
    return transform(value) * 2
"""Config module that creates unresolvable cycle with constants_module."""
DERIVED_VALUE = BASE_VALUE // 2
from constants_module import BASE_VALUE
CONFIG_MULTIPLIER = 2
"""Helper module that creates resolvable cycle with function_module."""
def transform(value):
    """Transform a value using another function."""
    from function_module import utility_function
    prefix = utility_function()
    return value + len(prefix)
def transform(value):
    """Transform a value using another function."""
    from function_module import utility_function
    prefix = utility_function()
    return value + len(prefix)
