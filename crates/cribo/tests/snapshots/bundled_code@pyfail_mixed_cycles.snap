---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_mixed_cycles/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
def process_data(value):
    """Process data using helper from another module."""
    return transform(value) * 2
def utility_function():
    """Another function that doesn't create a cycle."""
    return "utility"
"""Module with resolvable function-level circular dependency."""
def transform(value):
    """Transform a value using another function."""
    prefix = utility_function()
    return value + len(prefix)
"""Helper module that creates resolvable cycle with function_module."""
CONFIG_MULTIPLIER = 2
"""Config module that creates unresolvable cycle with constants_module."""
@functools.cache
def __cribo_init___cribo_df1b90_constants_module():
    module = types.SimpleNamespace()
    module.__name__ = 'constants_module'
    """Module with constants that has unresolvable circular dependency."""
    BASE_VALUE = 42 * CONFIG_MULTIPLIER
    module.BASE_VALUE = BASE_VALUE

    def get_base_value():
        """Function-level access is fine."""
        return module.BASE_VALUE
    module.get_base_value = get_base_value
    return module
"""Test case with mixed resolvable and unresolvable circular dependencies."""
constants_module = __cribo_init___cribo_df1b90_constants_module()
BASE_VALUE = constants_module.BASE_VALUE
def main():
    print(f"Base value: {BASE_VALUE}")
    result = process_data(10)
    print(f"Processed: {result}")
if __name__ == "__main__":
    main()
