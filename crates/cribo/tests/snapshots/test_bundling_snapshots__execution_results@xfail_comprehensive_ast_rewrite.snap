---
source: crates/cribo/tests/test_bundling_snapshots.rs
---
ExecutionResults {
    status: Failed(
        1,
    ),
    stdout: "",
    stderr: "Traceback (most recent call last):\n  File \"<TMP>/bundled.py\", line 10, in <module>\n    exec('\"\"\"\\\\nUtility helpers module with extensive naming conflicts\\\\n\"\"\"\\nfrom typing import Any, Dict, List\\n__core_utils_helpers_result = 0\\n__core_utils_helpers_User = \"helper_user_string\"\\nclass __core_utils_helpers_Logger:\\n    \"\"\"Utility logger class - conflicts with other Logger classes\"\"\"\\n\\n    def __init__(self, name: str):\\n        self.name = name\\n        self.messages: List[str] = []\\n        self.User = __core_utils_helpers_User\\n\\n    def log(self, message: str) -> None:\\n        self.messages.append(f\"[{self.name}] {message}\")\\n\\n    def get_message(self) -> str:\\n        return f\"Utils Logger: {self.name}\"\\n\\n    def process(self, data: Any) -> str:\\n        \"\"\"Method with same name as module functions\"\"\"\\n        return f\"logger_process: {data}\"\\ndef process(data: Any) -> str:\\n    \"\"\"Utility process function - major conflict with other process functions\"\"\"\\n    global result\\n    if isinstance(data, str):\\n        processed = data.upper()\\n    elif isinstance(data, (int, float)):\\n        processed = data * 2\\n    elif isinstance(data, dict):\\n        processed = {k: f\"util_{v}\" for k, v in data.items()}\\n    else:\\n        processed = str(data)\\n    __core_utils_helpers_result += 1\\n    return f\"util_processed: {processed}\"\\ndef validate(data: Any) -> bool:\\n    \"\"\"Utility validate function - conflicts with validate in other modules\"\"\"\\n    if data is None:\\n        return False\\n    if isinstance(data, str):\\n        return len(data) > 0\\n    elif isinstance(data, (list, dict)):\\n        return len(data) > 0\\n    elif isinstance(data, (int, float)):\\n        return data >= 0\\n    return True\\nclass __core_utils_helpers_Connection:\\n    \"\"\"Utility connection class - name conflict with database Connection\"\"\"\\n\\n    def __init__(self, connection_type: str=\"utility\"):\\n        self.connection_type = connection_type\\n        self.active = False\\n\\n    def __core_utils_helpers_connect(self) -> str:\\n        self.active = True\\n        return f\"Utility connection: {self.connection_type}\"\\ndef __core_utils_helpers_connect() -> __core_utils_helpers_Connection:\\n    \"\"\"Utility connect function\"\"\"\\n    return __core_utils_helpers_Connection(\"helper\")\\ndef process_with_conflicts(data: Any, User: str=\"param_user\", result: int=100, Logger: Any=None) -> Dict[str, Any]:\\n    \"\"\"Function with parameter names that conflict with globals and imports\"\"\"\\n    connection = __core_utils_helpers_connect()\\n    validate_result = validate(data)\\n    local_result = {\"data\": data, \"user_param\": User, \"result_param\": result, \"logger_param\": Logger, \"validation\": validate_result, \"connection_type\": connection.connection_type}\\n    return local_result\\nvalidate = validate\\nprocess = process', globals(), core.utils.helpers.__dict__)\n  File \"<string>\", line 5, in <module>\n  File \"<string>\", line 19, in __core_utils_helpers_Logger\nNameError: name 'Any' is not defined. Did you mean: 'any'?",
}
