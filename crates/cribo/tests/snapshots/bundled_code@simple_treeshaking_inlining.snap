---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/simple_treeshaking_inlining/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from abc import ABC
from enum import Enum
from typing import Protocol
ALICE_NAME = "Alice"
BOB_NAME = "Bob"
class Pet(ABC):
    pass
Pet.__module__ = 'speaking'
class Sex(Enum):
    MALE = "male"
    FEMALE = "female"
Sex.__module__ = 'speaking'
def say(phrase):
    return f"{phrase['what']}, {phrase['whom']}!"
def scream(phrase):
    return say(phrase).upper()
def create_ms(name):
    return f"Ms. {name}"
def create_mr(name):
    return f"Mr. {name}"
class PersonTitle(Protocol):

    def __str__(self) -> str:
        ...
PersonTitle.__module__ = 'speaking'
class Phrase(Protocol):
    what: str
    whom: str
Phrase.__module__ = 'speaking'
class Person:

    def __init__(self, name: str, sex: Sex):
        self.name = name
        self.sex = sex

    def title(self) -> PersonTitle:
        if self.sex == Sex.FEMALE:
            return create_ms(self.name)
        else:
            return create_mr(self.name)
Person.__module__ = 'speaking'
"""Module with many symbols, only some of which are used"""
def main() -> None:
    print(say({"what": "Hello", "whom": create_ms(ALICE_NAME)}))
    alice = Person(ALICE_NAME, Sex.FEMALE)
    print(f"Created person: {alice.name}")
if __name__ == "__main__":
    main()
