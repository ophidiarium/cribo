---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_namespace_simple_test/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
def __cribo_init___cribo_cbfc60_mymodule_utils():
    if '__cribo_cbfc60_mymodule_utils' in sys.modules:
        return sys.modules['__cribo_cbfc60_mymodule_utils']
    module = types.ModuleType('__cribo_cbfc60_mymodule_utils')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_cbfc60_mymodule_utils'] = module
    sys.modules['mymodule.utils'] = module
    if 'mymodule' in sys.modules:
        setattr(sys.modules['mymodule'], 'utils', module)
    """Simple utilities module"""
    CONSTANT = 42
    module.CONSTANT = CONSTANT

    def greet(name: str) -> str:
        """Greet someone"""
        return f"Hello, {name}!"
    module.greet = greet
    return module
__cribo_modules = {'mymodule.utils': '__cribo_cbfc60_mymodule_utils'}
__cribo_init_functions = {'__cribo_cbfc60_mymodule_utils': __cribo_init___cribo_cbfc60_mymodule_utils}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_cbfc60_mymodule_utils()
mymodule = types.ModuleType('mymodule')
mymodule.utils = sys.modules['mymodule.utils']
"""Test namespace imports with simple module"""
utils = types.SimpleNamespace()
utils.CONSTANT = CONSTANT
utils.greet = greet
print(utils.greet("World"))
print(f"Constant: {utils.CONSTANT}")
