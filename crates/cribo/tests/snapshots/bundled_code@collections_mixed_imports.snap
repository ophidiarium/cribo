---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/collections_mixed_imports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
@functools.cache
def __cribo_init___cribo_53066e_module_b():
    module = types.SimpleNamespace()
    """Module B with side effects that uses collections.abc."""
    from collections.abc import MutableMapping
    print("Module B initializing...")

    def check_mapping(obj):
        """Check if object is a MutableMapping."""
        if isinstance(obj, MutableMapping):
            return f"Yes, it's a MutableMapping with {len(obj)} items"
        else:
            return "No, it's not a MutableMapping"
    module.check_mapping = check_mapping
    return module
@functools.cache
def __cribo_init___cribo_22dc8d_module_a():
    module = types.SimpleNamespace()
    """Module A with side effects that uses collections."""
    from collections import OrderedDict
    print("Module A initializing...")

    def create_ordered_dict():
        """Create an OrderedDict."""
        od = OrderedDict()
        od['x'] = 1
        od['y'] = 2
        od['z'] = 3
        return od
    module.create_ordered_dict = create_ordered_dict
    return module
"""Test case for mixed collections imports with wrapper modules."""
module_a = __cribo_init___cribo_22dc8d_module_a()
module_b = __cribo_init___cribo_53066e_module_b()
def main():
    data = module_a.create_ordered_dict()
    result = module_b.check_mapping(data)
    print(f"Result: {result}")
if __name__ == "__main__":
    main()
