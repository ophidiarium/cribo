---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stickytape_script_using_from_to_import_module/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
def __cribo_init___cribo_f54e3c_greetings_greeting():
    if '__cribo_f54e3c_greetings_greeting' in sys.modules:
        return sys.modules['__cribo_f54e3c_greetings_greeting']
    module = types.ModuleType('__cribo_f54e3c_greetings_greeting')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_f54e3c_greetings_greeting'] = module
    sys.modules['greetings.greeting'] = module
    if 'greetings' in sys.modules:
        setattr(sys.modules['greetings'], 'greeting', module)
    config = sys.modules['greetings.config']
    module.config = config
    message = "Hello"
    module.message = message

    def get_default_greeting():
        return f"{message}, {config.DEFAULT_NAME}!"
    module.get_default_greeting = get_default_greeting
    return module
def __cribo_init___cribo_767ed3_greetings_config():
    if '__cribo_767ed3_greetings_config' in sys.modules:
        return sys.modules['__cribo_767ed3_greetings_config']
    module = types.ModuleType('__cribo_767ed3_greetings_config')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_767ed3_greetings_config'] = module
    sys.modules['greetings.config'] = module
    if 'greetings' in sys.modules:
        setattr(sys.modules['greetings'], 'config', module)
    DEFAULT_NAME = "User"
    module.DEFAULT_NAME = DEFAULT_NAME
    return module
__cribo_modules = {'greetings.greeting': '__cribo_f54e3c_greetings_greeting', 'greetings.config': '__cribo_767ed3_greetings_config'}
__cribo_init_functions = {'__cribo_f54e3c_greetings_greeting': __cribo_init___cribo_f54e3c_greetings_greeting, '__cribo_767ed3_greetings_config': __cribo_init___cribo_767ed3_greetings_config}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_767ed3_greetings_config()
__cribo_init___cribo_f54e3c_greetings_greeting()
greetings = types.ModuleType('greetings')
greetings.config = sys.modules['greetings.config']
greetings.greeting = sys.modules['greetings.greeting']
greeting = sys.modules['greetings.greeting']
print(greeting.message)
print(greeting.get_default_greeting())
