---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/side_effect_preservation/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
state = _cribo.types.SimpleNamespace(__name__='state')
"""Shared state module to avoid circular imports."""
_registered_plugins = []
def get_state():
    """Get a copy of the current state."""
    return _registered_plugins.copy()
def add_plugin(name):
    """Add a plugin to the registry."""
    _registered_plugins.append(name)
    return name
state.add_plugin = add_plugin
state.get_state = get_state
external_plugin = _cribo.types.SimpleNamespace(__name__='external_plugin', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_f23a44_external_plugin(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """External plugin that registers itself when imported."""
    add_plugin = state.add_plugin
    external_plugin.add_plugin = add_plugin

    def register_plugin():
        """Register this plugin."""
        return add_plugin("external_plugin")
    self.register_plugin = register_plugin
    add_plugin("external_plugin_loaded")
    self.__initialized__ = True
    self.__initializing__ = False
    return self
external_plugin.__init__ = _cribo_init___cribo_f23a44_external_plugin
utils = _cribo.types.SimpleNamespace(__name__='utils')
"""Utility module with unused functions."""
def unused_function():
    """This function is imported but never used."""
    return "unused"
utils.unused_function = unused_function
"""Test that side-effect imports are preserved even when symbols are unused."""
registered_plugins = []
def test_side_effects():
    """Test function that imports modules for side effects only."""
    register_plugin = _cribo_init___cribo_f23a44_external_plugin(globals()['external_plugin']).register_plugin
    return get_state()
if __name__ == "__main__":
    print(f"Initial state: {get_state()}")
    result = test_side_effects()
    print(f"After imports: {result}")
