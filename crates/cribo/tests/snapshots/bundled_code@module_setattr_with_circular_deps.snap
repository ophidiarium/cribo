---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/module_setattr_with_circular_deps/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
pkg = types.SimpleNamespace(__name__='pkg')
pkg__client = types.SimpleNamespace(__name__='pkg._client')
pkg._client = pkg__client
pkg__main = types.SimpleNamespace(__name__='pkg._main')
pkg._main = pkg__main
pkg__models = types.SimpleNamespace(__name__='pkg._models')
pkg._models = pkg__models
pkg__types = types.SimpleNamespace(__name__='pkg._types')
pkg._types = pkg__types
@functools.cache
def __cribo_init___cribo_1fb248_pkg():
    __cribo_module = types.SimpleNamespace()
    __cribo_module.__name__ = 'pkg'
    global AsyncStream, SyncStream
    __cribo_module.AsyncStream = AsyncStream
    __cribo_module.SyncStream = SyncStream
    """Package that sets __module__ on all exported items, like httpx does."""
    __cribo_module.Client = Client
    __cribo_module.Request = Request
    __cribo_module.Response = Response
    __cribo_module.main = main
    __all__ = ["AsyncStream", "SyncStream", "Client", "Request", "Response", "main"]
    __locals = vars(__cribo_module)
    __cribo_module.__locals = __locals
    for __name in __all__:
        if not __name.startswith("__"):
            setattr(__locals[__name], "__module__", "pkg")
    __cribo_module._main = pkg__main
    __cribo_module._models = pkg__models
    __cribo_module._client = pkg__client
    __cribo_module._types = pkg__types
    return __cribo_module
class Request:
    """Request model."""

    def __init__(self):
        self.stream = pkg.SyncStream()
class Response:
    """Response model."""

    def __init__(self):
        self.stream = pkg.AsyncStream()
class Client:
    """Client that uses streams."""

    def __init__(self):
        self.async_stream = pkg.AsyncStream()
        self.sync_stream = pkg.SyncStream()

    def make_request(self):
        req = Request()
        return Response()
class AsyncStream:
    """Async stream implementation."""

    def read(self):
        return "async data"
class SyncStream:
    """Sync stream implementation."""

    def read(self):
        return "sync data"
def main():
    """Main function using Client."""
    client = Client()
    return client.make_request()
"""Main module that imports client which imports back to parent."""
Request.__module__ = 'pkg._models'
Response.__module__ = 'pkg._models'
"""Models module that also imports from parent."""
Client.__module__ = 'pkg._client'
"""Client module with circular import and other dependencies."""
AsyncStream.__module__ = 'pkg._types'
SyncStream.__module__ = 'pkg._types'
"""Types module with stream classes."""
pkg = __cribo_init___cribo_1fb248_pkg()
pkg__main.main = main
pkg__models.Request = Request
pkg__models.Response = Response
pkg__client.Client = Client
pkg__types.AsyncStream = AsyncStream
pkg__types.SyncStream = SyncStream
"""Test module attribute setting on wildcard imports with circular dependencies."""
pkg = __cribo_init___cribo_1fb248_pkg()
stream_a = pkg.AsyncStream()
stream_s = pkg.SyncStream()
print(f"AsyncStream: {stream_a.read()}")
print(f"SyncStream: {stream_s.read()}")
print("Success!")
