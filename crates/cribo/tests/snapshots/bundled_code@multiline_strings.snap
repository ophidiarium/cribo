---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/multiline_strings/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
strings_inline = _cribo.types.SimpleNamespace(__name__='strings_inline')
"""Inline-only module mixing multiline literal patterns."""
HEADER = '''Inline Section
- maintains indentation
- uses single quotes
'''
DOUBLE_QUOTED = """Double-quoted block demonstrating nested 'single quotes'
and maintaining the original quoting style.
"""
TAIL = """Trailing piece
    spans multiple
    lines
    """ "with extra info\n"
def format_report(data: dict[str, object]) -> str:
    """Combine multiline pieces into final string."""
    body = f"""Report:
    name={data['name']}
    value={data['value']}
    """
    extra = f'''Summary:
    keys={", ".join(data.keys())}
    '''
    return HEADER + DOUBLE_QUOTED + body + TAIL + extra
strings_inline.DOUBLE_QUOTED = DOUBLE_QUOTED
strings_inline.HEADER = HEADER
strings_inline.TAIL = TAIL
strings_inline.format_report = format_report
side_effect_module = _cribo.types.SimpleNamespace(__name__='side_effect_module', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_2f952c_side_effect_module(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Module with side effects and diverse multiline literals."""
    START_BANNER = """Loading side effect module:
    - timestamps
    - values
"""
    self.START_BANNER = START_BANNER
    DETAILS = '''        Captured context:
        module={__name__}
    ''' "        status=ready"
    self.DETAILS = DETAILS

    def _render_start() -> str:
        """Produce a multiline message with runtime data."""
        message = f"""Start Time:
    2024-01-02 03:04:05
    Module: multiline_strings.side_effect_module
    Status: {"ready"}
    """
        more = """Computed Values:
        length=62
    """
        note = """Generated output
        includes a blank line
        """ "appended"
        return message + more + note
    self._render_start = _render_start
    SUMMARY_TEXT = START_BANNER + DETAILS
    self.SUMMARY_TEXT = SUMMARY_TEXT
    print(_render_start())
    self.__initialized__ = True
    self.__initializing__ = False
    return self
side_effect_module.__init__ = _cribo_init___cribo_2f952c_side_effect_module
"""Entry point exercising multiline string handling across modules."""
side_effect_module = _cribo_init___cribo_2f952c_side_effect_module(side_effect_module)
def main() -> None:
    data = {"name": "Cribo", "value": 42}
    print(format_report(data))
    print(side_effect_module.SUMMARY_TEXT)
if __name__ == "__main__":
    main()
